/* automatically generated by rust-bindgen */

# [ repr ( C ) ] # [ derive ( Copy , Clone , Debug , Default , Eq , Hash , Ord , PartialEq , PartialOrd ) ] pub struct __BindgenBitfieldUnit < Storage , Align > { storage : Storage , align : [ Align ; 0 ] , } impl < Storage , Align > __BindgenBitfieldUnit < Storage , Align > { # [ inline ] pub const fn new ( storage : Storage ) -> Self { Self { storage , align : [ ] } } } impl < Storage , Align > __BindgenBitfieldUnit < Storage , Align > where Storage : AsRef < [ u8 ] > + AsMut < [ u8 ] >, { # [ inline ] pub fn get_bit ( & self , index : usize ) -> bool { debug_assert ! ( index / 8 < self . storage . as_ref ( ) . len ( ) ) ; let byte_index = index / 8 ; let byte = self . storage . as_ref ( ) [ byte_index ] ; let bit_index = if cfg ! ( target_endian = "big" ) { 7 - ( index % 8 ) } else { index % 8 } ; let mask = 1 << bit_index ; byte & mask == mask } # [ inline ] pub fn set_bit ( & mut self , index : usize , val : bool ) { debug_assert ! ( index / 8 < self . storage . as_ref ( ) . len ( ) ) ; let byte_index = index / 8 ; let byte = & mut self . storage . as_mut ( ) [ byte_index ] ; let bit_index = if cfg ! ( target_endian = "big" ) { 7 - ( index % 8 ) } else { index % 8 } ; let mask = 1 << bit_index ; if val { * byte |= mask ; } else { * byte &= ! mask ; } } # [ inline ] pub fn get ( & self , bit_offset : usize , bit_width : u8 ) -> u64 { debug_assert ! ( bit_width <= 64 ) ; debug_assert ! ( bit_offset / 8 < self . storage . as_ref ( ) . len ( ) ) ; debug_assert ! ( ( bit_offset + ( bit_width as usize ) ) / 8 <= self . storage . as_ref ( ) . len ( ) ) ; let mut val = 0 ; for i in 0 .. ( bit_width as usize ) { if self . get_bit ( i + bit_offset ) { let index = if cfg ! ( target_endian = "big" ) { bit_width as usize - 1 - i } else { i } ; val |= 1 << index ; } } val } # [ inline ] pub fn set ( & mut self , bit_offset : usize , bit_width : u8 , val : u64 ) { debug_assert ! ( bit_width <= 64 ) ; debug_assert ! ( bit_offset / 8 < self . storage . as_ref ( ) . len ( ) ) ; debug_assert ! ( ( bit_offset + ( bit_width as usize ) ) / 8 <= self . storage . as_ref ( ) . len ( ) ) ; for i in 0 .. ( bit_width as usize ) { let mask = 1 << i ; let val_bit_is_set = val & mask == mask ; let index = if cfg ! ( target_endian = "big" ) { bit_width as usize - 1 - i } else { i } ; self . set_bit ( index + bit_offset , val_bit_is_set ) ; } } } pub const __DARWIN_ONLY_64_BIT_INO_T : u32 = 0 ; pub const __DARWIN_ONLY_VERS_1050 : u32 = 0 ; pub const __DARWIN_ONLY_UNIX_CONFORMANCE : u32 = 1 ; pub const __DARWIN_UNIX03 : u32 = 1 ; pub const __DARWIN_64_BIT_INO_T : u32 = 1 ; pub const __DARWIN_VERS_1050 : u32 = 1 ; pub const __DARWIN_NON_CANCELABLE : u32 = 0 ; pub const __DARWIN_SUF_64_BIT_INO_T : & 'static [ u8 ; 9usize ] = b"$INODE64\0" ; pub const __DARWIN_SUF_1050 : & 'static [ u8 ; 6usize ] = b"$1050\0" ; pub const __DARWIN_SUF_EXTSN : & 'static [ u8 ; 14usize ] = b"$DARWIN_EXTSN\0" ; pub const __DARWIN_C_ANSI : u32 = 4096 ; pub const __DARWIN_C_FULL : u32 = 900000 ; pub const __DARWIN_C_LEVEL : u32 = 900000 ; pub const __STDC_WANT_LIB_EXT1__ : u32 = 1 ; pub const __DARWIN_NO_LONG_LONG : u32 = 0 ; pub const _DARWIN_FEATURE_64_BIT_INODE : u32 = 1 ; pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE : u32 = 1 ; pub const _DARWIN_FEATURE_UNIX_CONFORMANCE : u32 = 3 ; pub const __API_TO_BE_DEPRECATED : u32 = 100000 ; pub const __MAC_10_0 : u32 = 1000 ; pub const __MAC_10_1 : u32 = 1010 ; pub const __MAC_10_2 : u32 = 1020 ; pub const __MAC_10_3 : u32 = 1030 ; pub const __MAC_10_4 : u32 = 1040 ; pub const __MAC_10_5 : u32 = 1050 ; pub const __MAC_10_6 : u32 = 1060 ; pub const __MAC_10_7 : u32 = 1070 ; pub const __MAC_10_8 : u32 = 1080 ; pub const __MAC_10_9 : u32 = 1090 ; pub const __MAC_10_10 : u32 = 101000 ; pub const __MAC_10_10_2 : u32 = 101002 ; pub const __MAC_10_10_3 : u32 = 101003 ; pub const __MAC_10_11 : u32 = 101100 ; pub const __MAC_10_11_2 : u32 = 101102 ; pub const __MAC_10_11_3 : u32 = 101103 ; pub const __MAC_10_11_4 : u32 = 101104 ; pub const __MAC_10_12 : u32 = 101200 ; pub const __MAC_10_12_1 : u32 = 101201 ; pub const __MAC_10_12_2 : u32 = 101202 ; pub const __MAC_10_12_4 : u32 = 101204 ; pub const __MAC_10_13 : u32 = 101300 ; pub const __MAC_10_13_1 : u32 = 101301 ; pub const __MAC_10_13_2 : u32 = 101302 ; pub const __MAC_10_13_4 : u32 = 101304 ; pub const __MAC_10_14 : u32 = 101400 ; pub const __MAC_10_14_1 : u32 = 101401 ; pub const __IPHONE_2_0 : u32 = 20000 ; pub const __IPHONE_2_1 : u32 = 20100 ; pub const __IPHONE_2_2 : u32 = 20200 ; pub const __IPHONE_3_0 : u32 = 30000 ; pub const __IPHONE_3_1 : u32 = 30100 ; pub const __IPHONE_3_2 : u32 = 30200 ; pub const __IPHONE_4_0 : u32 = 40000 ; pub const __IPHONE_4_1 : u32 = 40100 ; pub const __IPHONE_4_2 : u32 = 40200 ; pub const __IPHONE_4_3 : u32 = 40300 ; pub const __IPHONE_5_0 : u32 = 50000 ; pub const __IPHONE_5_1 : u32 = 50100 ; pub const __IPHONE_6_0 : u32 = 60000 ; pub const __IPHONE_6_1 : u32 = 60100 ; pub const __IPHONE_7_0 : u32 = 70000 ; pub const __IPHONE_7_1 : u32 = 70100 ; pub const __IPHONE_8_0 : u32 = 80000 ; pub const __IPHONE_8_1 : u32 = 80100 ; pub const __IPHONE_8_2 : u32 = 80200 ; pub const __IPHONE_8_3 : u32 = 80300 ; pub const __IPHONE_8_4 : u32 = 80400 ; pub const __IPHONE_9_0 : u32 = 90000 ; pub const __IPHONE_9_1 : u32 = 90100 ; pub const __IPHONE_9_2 : u32 = 90200 ; pub const __IPHONE_9_3 : u32 = 90300 ; pub const __IPHONE_10_0 : u32 = 100000 ; pub const __IPHONE_10_1 : u32 = 100100 ; pub const __IPHONE_10_2 : u32 = 100200 ; pub const __IPHONE_10_3 : u32 = 100300 ; pub const __IPHONE_11_0 : u32 = 110000 ; pub const __IPHONE_11_1 : u32 = 110100 ; pub const __IPHONE_11_2 : u32 = 110200 ; pub const __IPHONE_11_3 : u32 = 110300 ; pub const __IPHONE_11_4 : u32 = 110400 ; pub const __IPHONE_12_0 : u32 = 120000 ; pub const __IPHONE_12_1 : u32 = 120100 ; pub const __TVOS_9_0 : u32 = 90000 ; pub const __TVOS_9_1 : u32 = 90100 ; pub const __TVOS_9_2 : u32 = 90200 ; pub const __TVOS_10_0 : u32 = 100000 ; pub const __TVOS_10_0_1 : u32 = 100001 ; pub const __TVOS_10_1 : u32 = 100100 ; pub const __TVOS_10_2 : u32 = 100200 ; pub const __TVOS_11_0 : u32 = 110000 ; pub const __TVOS_11_1 : u32 = 110100 ; pub const __TVOS_11_2 : u32 = 110200 ; pub const __TVOS_11_3 : u32 = 110300 ; pub const __TVOS_11_4 : u32 = 110400 ; pub const __TVOS_12_0 : u32 = 120000 ; pub const __TVOS_12_1 : u32 = 120100 ; pub const __WATCHOS_1_0 : u32 = 10000 ; pub const __WATCHOS_2_0 : u32 = 20000 ; pub const __WATCHOS_2_1 : u32 = 20100 ; pub const __WATCHOS_2_2 : u32 = 20200 ; pub const __WATCHOS_3_0 : u32 = 30000 ; pub const __WATCHOS_3_1 : u32 = 30100 ; pub const __WATCHOS_3_1_1 : u32 = 30101 ; pub const __WATCHOS_3_2 : u32 = 30200 ; pub const __WATCHOS_4_0 : u32 = 40000 ; pub const __WATCHOS_4_1 : u32 = 40100 ; pub const __WATCHOS_4_2 : u32 = 40200 ; pub const __WATCHOS_4_3 : u32 = 40300 ; pub const __WATCHOS_5_0 : u32 = 50000 ; pub const __WATCHOS_5_1 : u32 = 50100 ; pub const __MAC_OS_X_VERSION_MAX_ALLOWED : u32 = 101401 ; pub const __PTHREAD_SIZE__ : u32 = 8176 ; pub const __PTHREAD_ATTR_SIZE__ : u32 = 56 ; pub const __PTHREAD_MUTEXATTR_SIZE__ : u32 = 8 ; pub const __PTHREAD_MUTEX_SIZE__ : u32 = 56 ; pub const __PTHREAD_CONDATTR_SIZE__ : u32 = 8 ; pub const __PTHREAD_COND_SIZE__ : u32 = 40 ; pub const __PTHREAD_ONCE_SIZE__ : u32 = 8 ; pub const __PTHREAD_RWLOCK_SIZE__ : u32 = 192 ; pub const __PTHREAD_RWLOCKATTR_SIZE__ : u32 = 16 ; pub const __DARWIN_WCHAR_MIN : i32 = -2147483648 ; pub const _FORTIFY_SOURCE : u32 = 2 ; pub const RENAME_SECLUDE : u32 = 1 ; pub const RENAME_SWAP : u32 = 2 ; pub const RENAME_EXCL : u32 = 4 ; pub const __SLBF : u32 = 1 ; pub const __SNBF : u32 = 2 ; pub const __SRD : u32 = 4 ; pub const __SWR : u32 = 8 ; pub const __SRW : u32 = 16 ; pub const __SEOF : u32 = 32 ; pub const __SERR : u32 = 64 ; pub const __SMBF : u32 = 128 ; pub const __SAPP : u32 = 256 ; pub const __SSTR : u32 = 512 ; pub const __SOPT : u32 = 1024 ; pub const __SNPT : u32 = 2048 ; pub const __SOFF : u32 = 4096 ; pub const __SMOD : u32 = 8192 ; pub const __SALC : u32 = 16384 ; pub const __SIGN : u32 = 32768 ; pub const _IOFBF : u32 = 0 ; pub const _IOLBF : u32 = 1 ; pub const _IONBF : u32 = 2 ; pub const BUFSIZ : u32 = 1024 ; pub const EOF : i32 = -1 ; pub const FOPEN_MAX : u32 = 20 ; pub const FILENAME_MAX : u32 = 1024 ; pub const P_tmpdir : & 'static [ u8 ; 10usize ] = b"/var/tmp/\0" ; pub const L_tmpnam : u32 = 1024 ; pub const TMP_MAX : u32 = 308915776 ; pub const SEEK_SET : u32 = 0 ; pub const SEEK_CUR : u32 = 1 ; pub const SEEK_END : u32 = 2 ; pub const L_ctermid : u32 = 1024 ; pub const __CTERMID_DEFINED : u32 = 1 ; pub const _USE_FORTIFY_LEVEL : u32 = 2 ; pub const __DARWIN_NSIG : u32 = 32 ; pub const NSIG : u32 = 32 ; pub const _I386_SIGNAL_H_ : u32 = 1 ; pub const SIGHUP : u32 = 1 ; pub const SIGINT : u32 = 2 ; pub const SIGQUIT : u32 = 3 ; pub const SIGILL : u32 = 4 ; pub const SIGTRAP : u32 = 5 ; pub const SIGABRT : u32 = 6 ; pub const SIGIOT : u32 = 6 ; pub const SIGEMT : u32 = 7 ; pub const SIGFPE : u32 = 8 ; pub const SIGKILL : u32 = 9 ; pub const SIGBUS : u32 = 10 ; pub const SIGSEGV : u32 = 11 ; pub const SIGSYS : u32 = 12 ; pub const SIGPIPE : u32 = 13 ; pub const SIGALRM : u32 = 14 ; pub const SIGTERM : u32 = 15 ; pub const SIGURG : u32 = 16 ; pub const SIGSTOP : u32 = 17 ; pub const SIGTSTP : u32 = 18 ; pub const SIGCONT : u32 = 19 ; pub const SIGCHLD : u32 = 20 ; pub const SIGTTIN : u32 = 21 ; pub const SIGTTOU : u32 = 22 ; pub const SIGIO : u32 = 23 ; pub const SIGXCPU : u32 = 24 ; pub const SIGXFSZ : u32 = 25 ; pub const SIGVTALRM : u32 = 26 ; pub const SIGPROF : u32 = 27 ; pub const SIGWINCH : u32 = 28 ; pub const SIGINFO : u32 = 29 ; pub const SIGUSR1 : u32 = 30 ; pub const SIGUSR2 : u32 = 31 ; pub const FP_PREC_24B : u32 = 0 ; pub const FP_PREC_53B : u32 = 2 ; pub const FP_PREC_64B : u32 = 3 ; pub const FP_RND_NEAR : u32 = 0 ; pub const FP_RND_DOWN : u32 = 1 ; pub const FP_RND_UP : u32 = 2 ; pub const FP_CHOP : u32 = 3 ; pub const FP_STATE_BYTES : u32 = 512 ; pub const SIGEV_NONE : u32 = 0 ; pub const SIGEV_SIGNAL : u32 = 1 ; pub const SIGEV_THREAD : u32 = 3 ; pub const ILL_NOOP : u32 = 0 ; pub const ILL_ILLOPC : u32 = 1 ; pub const ILL_ILLTRP : u32 = 2 ; pub const ILL_PRVOPC : u32 = 3 ; pub const ILL_ILLOPN : u32 = 4 ; pub const ILL_ILLADR : u32 = 5 ; pub const ILL_PRVREG : u32 = 6 ; pub const ILL_COPROC : u32 = 7 ; pub const ILL_BADSTK : u32 = 8 ; pub const FPE_NOOP : u32 = 0 ; pub const FPE_FLTDIV : u32 = 1 ; pub const FPE_FLTOVF : u32 = 2 ; pub const FPE_FLTUND : u32 = 3 ; pub const FPE_FLTRES : u32 = 4 ; pub const FPE_FLTINV : u32 = 5 ; pub const FPE_FLTSUB : u32 = 6 ; pub const FPE_INTDIV : u32 = 7 ; pub const FPE_INTOVF : u32 = 8 ; pub const SEGV_NOOP : u32 = 0 ; pub const SEGV_MAPERR : u32 = 1 ; pub const SEGV_ACCERR : u32 = 2 ; pub const BUS_NOOP : u32 = 0 ; pub const BUS_ADRALN : u32 = 1 ; pub const BUS_ADRERR : u32 = 2 ; pub const BUS_OBJERR : u32 = 3 ; pub const TRAP_BRKPT : u32 = 1 ; pub const TRAP_TRACE : u32 = 2 ; pub const CLD_NOOP : u32 = 0 ; pub const CLD_EXITED : u32 = 1 ; pub const CLD_KILLED : u32 = 2 ; pub const CLD_DUMPED : u32 = 3 ; pub const CLD_TRAPPED : u32 = 4 ; pub const CLD_STOPPED : u32 = 5 ; pub const CLD_CONTINUED : u32 = 6 ; pub const POLL_IN : u32 = 1 ; pub const POLL_OUT : u32 = 2 ; pub const POLL_MSG : u32 = 3 ; pub const POLL_ERR : u32 = 4 ; pub const POLL_PRI : u32 = 5 ; pub const POLL_HUP : u32 = 6 ; pub const SA_ONSTACK : u32 = 1 ; pub const SA_RESTART : u32 = 2 ; pub const SA_RESETHAND : u32 = 4 ; pub const SA_NOCLDSTOP : u32 = 8 ; pub const SA_NODEFER : u32 = 16 ; pub const SA_NOCLDWAIT : u32 = 32 ; pub const SA_SIGINFO : u32 = 64 ; pub const SA_USERTRAMP : u32 = 256 ; pub const SA_64REGSET : u32 = 512 ; pub const SA_USERSPACE_MASK : u32 = 127 ; pub const SIG_BLOCK : u32 = 1 ; pub const SIG_UNBLOCK : u32 = 2 ; pub const SIG_SETMASK : u32 = 3 ; pub const SI_USER : u32 = 65537 ; pub const SI_QUEUE : u32 = 65538 ; pub const SI_TIMER : u32 = 65539 ; pub const SI_ASYNCIO : u32 = 65540 ; pub const SI_MESGQ : u32 = 65541 ; pub const SS_ONSTACK : u32 = 1 ; pub const SS_DISABLE : u32 = 4 ; pub const MINSIGSTKSZ : u32 = 32768 ; pub const SIGSTKSZ : u32 = 131072 ; pub const SV_ONSTACK : u32 = 1 ; pub const SV_INTERRUPT : u32 = 2 ; pub const SV_RESETHAND : u32 = 4 ; pub const SV_NODEFER : u32 = 16 ; pub const SV_NOCLDSTOP : u32 = 8 ; pub const SV_SIGINFO : u32 = 64 ; pub const __WORDSIZE : u32 = 64 ; pub const INT8_MAX : u32 = 127 ; pub const INT16_MAX : u32 = 32767 ; pub const INT32_MAX : u32 = 2147483647 ; pub const INT64_MAX : u64 = 9223372036854775807 ; pub const INT8_MIN : i32 = -128 ; pub const INT16_MIN : i32 = -32768 ; pub const INT32_MIN : i32 = -2147483648 ; pub const INT64_MIN : i64 = -9223372036854775808 ; pub const UINT8_MAX : u32 = 255 ; pub const UINT16_MAX : u32 = 65535 ; pub const UINT32_MAX : u32 = 4294967295 ; pub const UINT64_MAX : i32 = -1 ; pub const INT_LEAST8_MIN : i32 = -128 ; pub const INT_LEAST16_MIN : i32 = -32768 ; pub const INT_LEAST32_MIN : i32 = -2147483648 ; pub const INT_LEAST64_MIN : i64 = -9223372036854775808 ; pub const INT_LEAST8_MAX : u32 = 127 ; pub const INT_LEAST16_MAX : u32 = 32767 ; pub const INT_LEAST32_MAX : u32 = 2147483647 ; pub const INT_LEAST64_MAX : u64 = 9223372036854775807 ; pub const UINT_LEAST8_MAX : u32 = 255 ; pub const UINT_LEAST16_MAX : u32 = 65535 ; pub const UINT_LEAST32_MAX : u32 = 4294967295 ; pub const UINT_LEAST64_MAX : i32 = -1 ; pub const INT_FAST8_MIN : i32 = -128 ; pub const INT_FAST16_MIN : i32 = -32768 ; pub const INT_FAST32_MIN : i32 = -2147483648 ; pub const INT_FAST64_MIN : i64 = -9223372036854775808 ; pub const INT_FAST8_MAX : u32 = 127 ; pub const INT_FAST16_MAX : u32 = 32767 ; pub const INT_FAST32_MAX : u32 = 2147483647 ; pub const INT_FAST64_MAX : u64 = 9223372036854775807 ; pub const UINT_FAST8_MAX : u32 = 255 ; pub const UINT_FAST16_MAX : u32 = 65535 ; pub const UINT_FAST32_MAX : u32 = 4294967295 ; pub const UINT_FAST64_MAX : i32 = -1 ; pub const INTPTR_MAX : u64 = 9223372036854775807 ; pub const INTPTR_MIN : i64 = -9223372036854775808 ; pub const UINTPTR_MAX : i32 = -1 ; pub const INTMAX_MIN : i64 = -9223372036854775808 ; pub const INTMAX_MAX : u64 = 9223372036854775807 ; pub const UINTMAX_MAX : i32 = -1 ; pub const PTRDIFF_MIN : i64 = -9223372036854775808 ; pub const PTRDIFF_MAX : u64 = 9223372036854775807 ; pub const SIZE_MAX : i32 = -1 ; pub const RSIZE_MAX : i32 = -1 ; pub const WINT_MIN : i32 = -2147483648 ; pub const WINT_MAX : u32 = 2147483647 ; pub const SIG_ATOMIC_MIN : i32 = -2147483648 ; pub const SIG_ATOMIC_MAX : u32 = 2147483647 ; pub const PRIO_PROCESS : u32 = 0 ; pub const PRIO_PGRP : u32 = 1 ; pub const PRIO_USER : u32 = 2 ; pub const PRIO_DARWIN_THREAD : u32 = 3 ; pub const PRIO_DARWIN_PROCESS : u32 = 4 ; pub const PRIO_MIN : i32 = -20 ; pub const PRIO_MAX : u32 = 20 ; pub const PRIO_DARWIN_BG : u32 = 4096 ; pub const PRIO_DARWIN_NONUI : u32 = 4097 ; pub const RUSAGE_SELF : u32 = 0 ; pub const RUSAGE_CHILDREN : i32 = -1 ; pub const RUSAGE_INFO_V0 : u32 = 0 ; pub const RUSAGE_INFO_V1 : u32 = 1 ; pub const RUSAGE_INFO_V2 : u32 = 2 ; pub const RUSAGE_INFO_V3 : u32 = 3 ; pub const RUSAGE_INFO_V4 : u32 = 4 ; pub const RUSAGE_INFO_CURRENT : u32 = 4 ; pub const RLIMIT_CPU : u32 = 0 ; pub const RLIMIT_FSIZE : u32 = 1 ; pub const RLIMIT_DATA : u32 = 2 ; pub const RLIMIT_STACK : u32 = 3 ; pub const RLIMIT_CORE : u32 = 4 ; pub const RLIMIT_AS : u32 = 5 ; pub const RLIMIT_RSS : u32 = 5 ; pub const RLIMIT_MEMLOCK : u32 = 6 ; pub const RLIMIT_NPROC : u32 = 7 ; pub const RLIMIT_NOFILE : u32 = 8 ; pub const RLIM_NLIMITS : u32 = 9 ; pub const _RLIMIT_POSIX_FLAG : u32 = 4096 ; pub const RLIMIT_WAKEUPS_MONITOR : u32 = 1 ; pub const RLIMIT_CPU_USAGE_MONITOR : u32 = 2 ; pub const RLIMIT_THREAD_CPULIMITS : u32 = 3 ; pub const RLIMIT_FOOTPRINT_INTERVAL : u32 = 4 ; pub const WAKEMON_ENABLE : u32 = 1 ; pub const WAKEMON_DISABLE : u32 = 2 ; pub const WAKEMON_GET_PARAMS : u32 = 4 ; pub const WAKEMON_SET_DEFAULTS : u32 = 8 ; pub const WAKEMON_MAKE_FATAL : u32 = 16 ; pub const CPUMON_MAKE_FATAL : u32 = 4096 ; pub const FOOTPRINT_INTERVAL_RESET : u32 = 1 ; pub const IOPOL_TYPE_DISK : u32 = 0 ; pub const IOPOL_TYPE_VFS_ATIME_UPDATES : u32 = 2 ; pub const IOPOL_SCOPE_PROCESS : u32 = 0 ; pub const IOPOL_SCOPE_THREAD : u32 = 1 ; pub const IOPOL_SCOPE_DARWIN_BG : u32 = 2 ; pub const IOPOL_DEFAULT : u32 = 0 ; pub const IOPOL_IMPORTANT : u32 = 1 ; pub const IOPOL_PASSIVE : u32 = 2 ; pub const IOPOL_THROTTLE : u32 = 3 ; pub const IOPOL_UTILITY : u32 = 4 ; pub const IOPOL_STANDARD : u32 = 5 ; pub const IOPOL_APPLICATION : u32 = 5 ; pub const IOPOL_NORMAL : u32 = 1 ; pub const IOPOL_ATIME_UPDATES_DEFAULT : u32 = 0 ; pub const IOPOL_ATIME_UPDATES_OFF : u32 = 1 ; pub const WNOHANG : u32 = 1 ; pub const WUNTRACED : u32 = 2 ; pub const WCOREFLAG : u32 = 128 ; pub const _WSTOPPED : u32 = 127 ; pub const WEXITED : u32 = 4 ; pub const WSTOPPED : u32 = 8 ; pub const WCONTINUED : u32 = 16 ; pub const WNOWAIT : u32 = 32 ; pub const WAIT_ANY : i32 = -1 ; pub const WAIT_MYPGRP : u32 = 0 ; pub const _QUAD_HIGHWORD : u32 = 1 ; pub const _QUAD_LOWWORD : u32 = 0 ; pub const __DARWIN_LITTLE_ENDIAN : u32 = 1234 ; pub const __DARWIN_BIG_ENDIAN : u32 = 4321 ; pub const __DARWIN_PDP_ENDIAN : u32 = 3412 ; pub const __DARWIN_BYTE_ORDER : u32 = 1234 ; pub const LITTLE_ENDIAN : u32 = 1234 ; pub const BIG_ENDIAN : u32 = 4321 ; pub const PDP_ENDIAN : u32 = 3412 ; pub const BYTE_ORDER : u32 = 1234 ; pub const EXIT_FAILURE : u32 = 1 ; pub const EXIT_SUCCESS : u32 = 0 ; pub const RAND_MAX : u32 = 2147483647 ; pub const _PTHREAD_MUTEX_SIG_init : u32 = 850045863 ; pub const _PTHREAD_ERRORCHECK_MUTEX_SIG_init : u32 = 850045857 ; pub const _PTHREAD_RECURSIVE_MUTEX_SIG_init : u32 = 850045858 ; pub const _PTHREAD_FIRSTFIT_MUTEX_SIG_init : u32 = 850045859 ; pub const _PTHREAD_COND_SIG_init : u32 = 1018212795 ; pub const _PTHREAD_ONCE_SIG_init : u32 = 816954554 ; pub const _PTHREAD_RWLOCK_SIG_init : u32 = 766030772 ; pub const SCHED_OTHER : u32 = 1 ; pub const SCHED_FIFO : u32 = 4 ; pub const SCHED_RR : u32 = 2 ; pub const __SCHED_PARAM_SIZE__ : u32 = 4 ; pub const CLOCKS_PER_SEC : u32 = 1000000 ; pub const QOS_MIN_RELATIVE_PRIORITY : i32 = -15 ; pub const PTHREAD_CREATE_JOINABLE : u32 = 1 ; pub const PTHREAD_CREATE_DETACHED : u32 = 2 ; pub const PTHREAD_INHERIT_SCHED : u32 = 1 ; pub const PTHREAD_EXPLICIT_SCHED : u32 = 2 ; pub const PTHREAD_CANCEL_ENABLE : u32 = 1 ; pub const PTHREAD_CANCEL_DISABLE : u32 = 0 ; pub const PTHREAD_CANCEL_DEFERRED : u32 = 2 ; pub const PTHREAD_CANCEL_ASYNCHRONOUS : u32 = 0 ; pub const PTHREAD_SCOPE_SYSTEM : u32 = 1 ; pub const PTHREAD_SCOPE_PROCESS : u32 = 2 ; pub const PTHREAD_PROCESS_SHARED : u32 = 1 ; pub const PTHREAD_PROCESS_PRIVATE : u32 = 2 ; pub const PTHREAD_PRIO_NONE : u32 = 0 ; pub const PTHREAD_PRIO_INHERIT : u32 = 1 ; pub const PTHREAD_PRIO_PROTECT : u32 = 2 ; pub const PTHREAD_MUTEX_NORMAL : u32 = 0 ; pub const PTHREAD_MUTEX_ERRORCHECK : u32 = 1 ; pub const PTHREAD_MUTEX_RECURSIVE : u32 = 2 ; pub const PTHREAD_MUTEX_DEFAULT : u32 = 0 ; pub const PTHREAD_MUTEX_POLICY_FAIRSHARE_NP : u32 = 1 ; pub const PTHREAD_MUTEX_POLICY_FIRSTFIT_NP : u32 = 3 ; pub const _POSIX_VERSION : u32 = 200112 ; pub const _POSIX2_VERSION : u32 = 200112 ; pub const _POSIX_THREAD_KEYS_MAX : u32 = 128 ; pub const F_OK : u32 = 0 ; pub const X_OK : u32 = 1 ; pub const W_OK : u32 = 2 ; pub const R_OK : u32 = 4 ; pub const _READ_OK : u32 = 512 ; pub const _WRITE_OK : u32 = 1024 ; pub const _EXECUTE_OK : u32 = 2048 ; pub const _DELETE_OK : u32 = 4096 ; pub const _APPEND_OK : u32 = 8192 ; pub const _RMFILE_OK : u32 = 16384 ; pub const _RATTR_OK : u32 = 32768 ; pub const _WATTR_OK : u32 = 65536 ; pub const _REXT_OK : u32 = 131072 ; pub const _WEXT_OK : u32 = 262144 ; pub const _RPERM_OK : u32 = 524288 ; pub const _WPERM_OK : u32 = 1048576 ; pub const _CHOWN_OK : u32 = 2097152 ; pub const _ACCESS_EXTENDED_MASK : u32 = 4193792 ; pub const SEEK_HOLE : u32 = 3 ; pub const SEEK_DATA : u32 = 4 ; pub const L_SET : u32 = 0 ; pub const L_INCR : u32 = 1 ; pub const L_XTND : u32 = 2 ; pub const ACCESSX_MAX_DESCRIPTORS : u32 = 100 ; pub const ACCESSX_MAX_TABLESIZE : u32 = 16384 ; pub const _PC_LINK_MAX : u32 = 1 ; pub const _PC_MAX_CANON : u32 = 2 ; pub const _PC_MAX_INPUT : u32 = 3 ; pub const _PC_NAME_MAX : u32 = 4 ; pub const _PC_PATH_MAX : u32 = 5 ; pub const _PC_PIPE_BUF : u32 = 6 ; pub const _PC_CHOWN_RESTRICTED : u32 = 7 ; pub const _PC_NO_TRUNC : u32 = 8 ; pub const _PC_VDISABLE : u32 = 9 ; pub const _PC_NAME_CHARS_MAX : u32 = 10 ; pub const _PC_CASE_SENSITIVE : u32 = 11 ; pub const _PC_CASE_PRESERVING : u32 = 12 ; pub const _PC_EXTENDED_SECURITY_NP : u32 = 13 ; pub const _PC_AUTH_OPAQUE_NP : u32 = 14 ; pub const _PC_2_SYMLINKS : u32 = 15 ; pub const _PC_ALLOC_SIZE_MIN : u32 = 16 ; pub const _PC_ASYNC_IO : u32 = 17 ; pub const _PC_FILESIZEBITS : u32 = 18 ; pub const _PC_PRIO_IO : u32 = 19 ; pub const _PC_REC_INCR_XFER_SIZE : u32 = 20 ; pub const _PC_REC_MAX_XFER_SIZE : u32 = 21 ; pub const _PC_REC_MIN_XFER_SIZE : u32 = 22 ; pub const _PC_REC_XFER_ALIGN : u32 = 23 ; pub const _PC_SYMLINK_MAX : u32 = 24 ; pub const _PC_SYNC_IO : u32 = 25 ; pub const _PC_XATTR_SIZE_BITS : u32 = 26 ; pub const _PC_MIN_HOLE_SIZE : u32 = 27 ; pub const _CS_PATH : u32 = 1 ; pub const STDIN_FILENO : u32 = 0 ; pub const STDOUT_FILENO : u32 = 1 ; pub const STDERR_FILENO : u32 = 2 ; pub const _XOPEN_VERSION : u32 = 600 ; pub const _XOPEN_XCU_VERSION : u32 = 4 ; pub const _POSIX_ADVISORY_INFO : i32 = -1 ; pub const _POSIX_ASYNCHRONOUS_IO : i32 = -1 ; pub const _POSIX_BARRIERS : i32 = -1 ; pub const _POSIX_CHOWN_RESTRICTED : u32 = 200112 ; pub const _POSIX_CLOCK_SELECTION : i32 = -1 ; pub const _POSIX_CPUTIME : i32 = -1 ; pub const _POSIX_FSYNC : u32 = 200112 ; pub const _POSIX_IPV6 : u32 = 200112 ; pub const _POSIX_JOB_CONTROL : u32 = 200112 ; pub const _POSIX_MAPPED_FILES : u32 = 200112 ; pub const _POSIX_MEMLOCK : i32 = -1 ; pub const _POSIX_MEMLOCK_RANGE : i32 = -1 ; pub const _POSIX_MEMORY_PROTECTION : u32 = 200112 ; pub const _POSIX_MESSAGE_PASSING : i32 = -1 ; pub const _POSIX_MONOTONIC_CLOCK : i32 = -1 ; pub const _POSIX_NO_TRUNC : u32 = 200112 ; pub const _POSIX_PRIORITIZED_IO : i32 = -1 ; pub const _POSIX_PRIORITY_SCHEDULING : i32 = -1 ; pub const _POSIX_RAW_SOCKETS : i32 = -1 ; pub const _POSIX_READER_WRITER_LOCKS : u32 = 200112 ; pub const _POSIX_REALTIME_SIGNALS : i32 = -1 ; pub const _POSIX_REGEXP : u32 = 200112 ; pub const _POSIX_SAVED_IDS : u32 = 200112 ; pub const _POSIX_SEMAPHORES : i32 = -1 ; pub const _POSIX_SHARED_MEMORY_OBJECTS : i32 = -1 ; pub const _POSIX_SHELL : u32 = 200112 ; pub const _POSIX_SPAWN : i32 = -1 ; pub const _POSIX_SPIN_LOCKS : i32 = -1 ; pub const _POSIX_SPORADIC_SERVER : i32 = -1 ; pub const _POSIX_SYNCHRONIZED_IO : i32 = -1 ; pub const _POSIX_THREAD_ATTR_STACKADDR : u32 = 200112 ; pub const _POSIX_THREAD_ATTR_STACKSIZE : u32 = 200112 ; pub const _POSIX_THREAD_CPUTIME : i32 = -1 ; pub const _POSIX_THREAD_PRIO_INHERIT : i32 = -1 ; pub const _POSIX_THREAD_PRIO_PROTECT : i32 = -1 ; pub const _POSIX_THREAD_PRIORITY_SCHEDULING : i32 = -1 ; pub const _POSIX_THREAD_PROCESS_SHARED : u32 = 200112 ; pub const _POSIX_THREAD_SAFE_FUNCTIONS : u32 = 200112 ; pub const _POSIX_THREAD_SPORADIC_SERVER : i32 = -1 ; pub const _POSIX_THREADS : u32 = 200112 ; pub const _POSIX_TIMEOUTS : i32 = -1 ; pub const _POSIX_TIMERS : i32 = -1 ; pub const _POSIX_TRACE : i32 = -1 ; pub const _POSIX_TRACE_EVENT_FILTER : i32 = -1 ; pub const _POSIX_TRACE_INHERIT : i32 = -1 ; pub const _POSIX_TRACE_LOG : i32 = -1 ; pub const _POSIX_TYPED_MEMORY_OBJECTS : i32 = -1 ; pub const _POSIX2_C_BIND : u32 = 200112 ; pub const _POSIX2_C_DEV : u32 = 200112 ; pub const _POSIX2_CHAR_TERM : u32 = 200112 ; pub const _POSIX2_FORT_DEV : i32 = -1 ; pub const _POSIX2_FORT_RUN : u32 = 200112 ; pub const _POSIX2_LOCALEDEF : u32 = 200112 ; pub const _POSIX2_PBS : i32 = -1 ; pub const _POSIX2_PBS_ACCOUNTING : i32 = -1 ; pub const _POSIX2_PBS_CHECKPOINT : i32 = -1 ; pub const _POSIX2_PBS_LOCATE : i32 = -1 ; pub const _POSIX2_PBS_MESSAGE : i32 = -1 ; pub const _POSIX2_PBS_TRACK : i32 = -1 ; pub const _POSIX2_SW_DEV : u32 = 200112 ; pub const _POSIX2_UPE : u32 = 200112 ; pub const __ILP32_OFF32 : i32 = -1 ; pub const __ILP32_OFFBIG : u32 = 1 ; pub const __LP64_OFF64 : u32 = 1 ; pub const __LPBIG_OFFBIG : u32 = 1 ; pub const _POSIX_V6_ILP32_OFF32 : i32 = -1 ; pub const _POSIX_V6_ILP32_OFFBIG : u32 = 1 ; pub const _POSIX_V6_LP64_OFF64 : u32 = 1 ; pub const _POSIX_V6_LPBIG_OFFBIG : u32 = 1 ; pub const _POSIX_V7_ILP32_OFF32 : i32 = -1 ; pub const _POSIX_V7_ILP32_OFFBIG : u32 = 1 ; pub const _POSIX_V7_LP64_OFF64 : u32 = 1 ; pub const _POSIX_V7_LPBIG_OFFBIG : u32 = 1 ; pub const _V6_ILP32_OFF32 : i32 = -1 ; pub const _V6_ILP32_OFFBIG : u32 = 1 ; pub const _V6_LP64_OFF64 : u32 = 1 ; pub const _V6_LPBIG_OFFBIG : u32 = 1 ; pub const _XBS5_ILP32_OFF32 : i32 = -1 ; pub const _XBS5_ILP32_OFFBIG : u32 = 1 ; pub const _XBS5_LP64_OFF64 : u32 = 1 ; pub const _XBS5_LPBIG_OFFBIG : u32 = 1 ; pub const _XOPEN_CRYPT : u32 = 1 ; pub const _XOPEN_ENH_I18N : u32 = 1 ; pub const _XOPEN_LEGACY : i32 = -1 ; pub const _XOPEN_REALTIME : i32 = -1 ; pub const _XOPEN_REALTIME_THREADS : i32 = -1 ; pub const _XOPEN_SHM : u32 = 1 ; pub const _XOPEN_STREAMS : i32 = -1 ; pub const _XOPEN_UNIX : u32 = 1 ; pub const _SC_ARG_MAX : u32 = 1 ; pub const _SC_CHILD_MAX : u32 = 2 ; pub const _SC_CLK_TCK : u32 = 3 ; pub const _SC_NGROUPS_MAX : u32 = 4 ; pub const _SC_OPEN_MAX : u32 = 5 ; pub const _SC_JOB_CONTROL : u32 = 6 ; pub const _SC_SAVED_IDS : u32 = 7 ; pub const _SC_VERSION : u32 = 8 ; pub const _SC_BC_BASE_MAX : u32 = 9 ; pub const _SC_BC_DIM_MAX : u32 = 10 ; pub const _SC_BC_SCALE_MAX : u32 = 11 ; pub const _SC_BC_STRING_MAX : u32 = 12 ; pub const _SC_COLL_WEIGHTS_MAX : u32 = 13 ; pub const _SC_EXPR_NEST_MAX : u32 = 14 ; pub const _SC_LINE_MAX : u32 = 15 ; pub const _SC_RE_DUP_MAX : u32 = 16 ; pub const _SC_2_VERSION : u32 = 17 ; pub const _SC_2_C_BIND : u32 = 18 ; pub const _SC_2_C_DEV : u32 = 19 ; pub const _SC_2_CHAR_TERM : u32 = 20 ; pub const _SC_2_FORT_DEV : u32 = 21 ; pub const _SC_2_FORT_RUN : u32 = 22 ; pub const _SC_2_LOCALEDEF : u32 = 23 ; pub const _SC_2_SW_DEV : u32 = 24 ; pub const _SC_2_UPE : u32 = 25 ; pub const _SC_STREAM_MAX : u32 = 26 ; pub const _SC_TZNAME_MAX : u32 = 27 ; pub const _SC_ASYNCHRONOUS_IO : u32 = 28 ; pub const _SC_PAGESIZE : u32 = 29 ; pub const _SC_MEMLOCK : u32 = 30 ; pub const _SC_MEMLOCK_RANGE : u32 = 31 ; pub const _SC_MEMORY_PROTECTION : u32 = 32 ; pub const _SC_MESSAGE_PASSING : u32 = 33 ; pub const _SC_PRIORITIZED_IO : u32 = 34 ; pub const _SC_PRIORITY_SCHEDULING : u32 = 35 ; pub const _SC_REALTIME_SIGNALS : u32 = 36 ; pub const _SC_SEMAPHORES : u32 = 37 ; pub const _SC_FSYNC : u32 = 38 ; pub const _SC_SHARED_MEMORY_OBJECTS : u32 = 39 ; pub const _SC_SYNCHRONIZED_IO : u32 = 40 ; pub const _SC_TIMERS : u32 = 41 ; pub const _SC_AIO_LISTIO_MAX : u32 = 42 ; pub const _SC_AIO_MAX : u32 = 43 ; pub const _SC_AIO_PRIO_DELTA_MAX : u32 = 44 ; pub const _SC_DELAYTIMER_MAX : u32 = 45 ; pub const _SC_MQ_OPEN_MAX : u32 = 46 ; pub const _SC_MAPPED_FILES : u32 = 47 ; pub const _SC_RTSIG_MAX : u32 = 48 ; pub const _SC_SEM_NSEMS_MAX : u32 = 49 ; pub const _SC_SEM_VALUE_MAX : u32 = 50 ; pub const _SC_SIGQUEUE_MAX : u32 = 51 ; pub const _SC_TIMER_MAX : u32 = 52 ; pub const _SC_NPROCESSORS_CONF : u32 = 57 ; pub const _SC_NPROCESSORS_ONLN : u32 = 58 ; pub const _SC_2_PBS : u32 = 59 ; pub const _SC_2_PBS_ACCOUNTING : u32 = 60 ; pub const _SC_2_PBS_CHECKPOINT : u32 = 61 ; pub const _SC_2_PBS_LOCATE : u32 = 62 ; pub const _SC_2_PBS_MESSAGE : u32 = 63 ; pub const _SC_2_PBS_TRACK : u32 = 64 ; pub const _SC_ADVISORY_INFO : u32 = 65 ; pub const _SC_BARRIERS : u32 = 66 ; pub const _SC_CLOCK_SELECTION : u32 = 67 ; pub const _SC_CPUTIME : u32 = 68 ; pub const _SC_FILE_LOCKING : u32 = 69 ; pub const _SC_GETGR_R_SIZE_MAX : u32 = 70 ; pub const _SC_GETPW_R_SIZE_MAX : u32 = 71 ; pub const _SC_HOST_NAME_MAX : u32 = 72 ; pub const _SC_LOGIN_NAME_MAX : u32 = 73 ; pub const _SC_MONOTONIC_CLOCK : u32 = 74 ; pub const _SC_MQ_PRIO_MAX : u32 = 75 ; pub const _SC_READER_WRITER_LOCKS : u32 = 76 ; pub const _SC_REGEXP : u32 = 77 ; pub const _SC_SHELL : u32 = 78 ; pub const _SC_SPAWN : u32 = 79 ; pub const _SC_SPIN_LOCKS : u32 = 80 ; pub const _SC_SPORADIC_SERVER : u32 = 81 ; pub const _SC_THREAD_ATTR_STACKADDR : u32 = 82 ; pub const _SC_THREAD_ATTR_STACKSIZE : u32 = 83 ; pub const _SC_THREAD_CPUTIME : u32 = 84 ; pub const _SC_THREAD_DESTRUCTOR_ITERATIONS : u32 = 85 ; pub const _SC_THREAD_KEYS_MAX : u32 = 86 ; pub const _SC_THREAD_PRIO_INHERIT : u32 = 87 ; pub const _SC_THREAD_PRIO_PROTECT : u32 = 88 ; pub const _SC_THREAD_PRIORITY_SCHEDULING : u32 = 89 ; pub const _SC_THREAD_PROCESS_SHARED : u32 = 90 ; pub const _SC_THREAD_SAFE_FUNCTIONS : u32 = 91 ; pub const _SC_THREAD_SPORADIC_SERVER : u32 = 92 ; pub const _SC_THREAD_STACK_MIN : u32 = 93 ; pub const _SC_THREAD_THREADS_MAX : u32 = 94 ; pub const _SC_TIMEOUTS : u32 = 95 ; pub const _SC_THREADS : u32 = 96 ; pub const _SC_TRACE : u32 = 97 ; pub const _SC_TRACE_EVENT_FILTER : u32 = 98 ; pub const _SC_TRACE_INHERIT : u32 = 99 ; pub const _SC_TRACE_LOG : u32 = 100 ; pub const _SC_TTY_NAME_MAX : u32 = 101 ; pub const _SC_TYPED_MEMORY_OBJECTS : u32 = 102 ; pub const _SC_V6_ILP32_OFF32 : u32 = 103 ; pub const _SC_V6_ILP32_OFFBIG : u32 = 104 ; pub const _SC_V6_LP64_OFF64 : u32 = 105 ; pub const _SC_V6_LPBIG_OFFBIG : u32 = 106 ; pub const _SC_IPV6 : u32 = 118 ; pub const _SC_RAW_SOCKETS : u32 = 119 ; pub const _SC_SYMLOOP_MAX : u32 = 120 ; pub const _SC_ATEXIT_MAX : u32 = 107 ; pub const _SC_IOV_MAX : u32 = 56 ; pub const _SC_PAGE_SIZE : u32 = 29 ; pub const _SC_XOPEN_CRYPT : u32 = 108 ; pub const _SC_XOPEN_ENH_I18N : u32 = 109 ; pub const _SC_XOPEN_LEGACY : u32 = 110 ; pub const _SC_XOPEN_REALTIME : u32 = 111 ; pub const _SC_XOPEN_REALTIME_THREADS : u32 = 112 ; pub const _SC_XOPEN_SHM : u32 = 113 ; pub const _SC_XOPEN_STREAMS : u32 = 114 ; pub const _SC_XOPEN_UNIX : u32 = 115 ; pub const _SC_XOPEN_VERSION : u32 = 116 ; pub const _SC_XOPEN_XCU_VERSION : u32 = 121 ; pub const _SC_XBS5_ILP32_OFF32 : u32 = 122 ; pub const _SC_XBS5_ILP32_OFFBIG : u32 = 123 ; pub const _SC_XBS5_LP64_OFF64 : u32 = 124 ; pub const _SC_XBS5_LPBIG_OFFBIG : u32 = 125 ; pub const _SC_SS_REPL_MAX : u32 = 126 ; pub const _SC_TRACE_EVENT_NAME_MAX : u32 = 127 ; pub const _SC_TRACE_NAME_MAX : u32 = 128 ; pub const _SC_TRACE_SYS_MAX : u32 = 129 ; pub const _SC_TRACE_USER_EVENT_MAX : u32 = 130 ; pub const _SC_PASS_MAX : u32 = 131 ; pub const _SC_PHYS_PAGES : u32 = 200 ; pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS : u32 = 2 ; pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS : u32 = 3 ; pub const _CS_POSIX_V6_ILP32_OFF32_LIBS : u32 = 4 ; pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS : u32 = 5 ; pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS : u32 = 6 ; pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS : u32 = 7 ; pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS : u32 = 8 ; pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS : u32 = 9 ; pub const _CS_POSIX_V6_LP64_OFF64_LIBS : u32 = 10 ; pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS : u32 = 11 ; pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS : u32 = 12 ; pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS : u32 = 13 ; pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS : u32 = 14 ; pub const _CS_XBS5_ILP32_OFF32_CFLAGS : u32 = 20 ; pub const _CS_XBS5_ILP32_OFF32_LDFLAGS : u32 = 21 ; pub const _CS_XBS5_ILP32_OFF32_LIBS : u32 = 22 ; pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS : u32 = 23 ; pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS : u32 = 24 ; pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS : u32 = 25 ; pub const _CS_XBS5_ILP32_OFFBIG_LIBS : u32 = 26 ; pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS : u32 = 27 ; pub const _CS_XBS5_LP64_OFF64_CFLAGS : u32 = 28 ; pub const _CS_XBS5_LP64_OFF64_LDFLAGS : u32 = 29 ; pub const _CS_XBS5_LP64_OFF64_LIBS : u32 = 30 ; pub const _CS_XBS5_LP64_OFF64_LINTFLAGS : u32 = 31 ; pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS : u32 = 32 ; pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS : u32 = 33 ; pub const _CS_XBS5_LPBIG_OFFBIG_LIBS : u32 = 34 ; pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS : u32 = 35 ; pub const _CS_DARWIN_USER_DIR : u32 = 65536 ; pub const _CS_DARWIN_USER_TEMP_DIR : u32 = 65537 ; pub const _CS_DARWIN_USER_CACHE_DIR : u32 = 65538 ; pub const F_ULOCK : u32 = 0 ; pub const F_LOCK : u32 = 1 ; pub const F_TLOCK : u32 = 2 ; pub const F_TEST : u32 = 3 ; pub const __DARWIN_FD_SETSIZE : u32 = 1024 ; pub const __DARWIN_NBBY : u32 = 8 ; pub const FD_SETSIZE : u32 = 1024 ; pub const SYNC_VOLUME_FULLSYNC : u32 = 1 ; pub const SYNC_VOLUME_WAIT : u32 = 2 ; pub const QERROR : u32 = 13 ; pub const TPERROR : u32 = 11 ; pub type __int8_t = :: std :: os :: raw :: c_schar ; pub type __uint8_t = :: std :: os :: raw :: c_uchar ; pub type __int16_t = :: std :: os :: raw :: c_short ; pub type __uint16_t = :: std :: os :: raw :: c_ushort ; pub type __int32_t = :: std :: os :: raw :: c_int ; pub type __uint32_t = :: std :: os :: raw :: c_uint ; pub type __int64_t = :: std :: os :: raw :: c_longlong ; pub type __uint64_t = :: std :: os :: raw :: c_ulonglong ; pub type __darwin_intptr_t = :: std :: os :: raw :: c_long ; pub type __darwin_natural_t = :: std :: os :: raw :: c_uint ; pub type __darwin_ct_rune_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union __mbstate_t { pub __mbstate8 : [ :: std :: os :: raw :: c_char ; 128usize ] , pub _mbstateL : :: std :: os :: raw :: c_longlong , _bindgen_union_align : [ u64 ; 16usize ] , } # [ test ] fn bindgen_test_layout___mbstate_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __mbstate_t > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( __mbstate_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __mbstate_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __mbstate_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __mbstate_t > ( ) ) ) . __mbstate8 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __mbstate_t ) , "::" , stringify ! ( __mbstate8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __mbstate_t > ( ) ) ) . _mbstateL as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __mbstate_t ) , "::" , stringify ! ( _mbstateL ) ) ) ; } pub type __darwin_mbstate_t = __mbstate_t ; pub type __darwin_ptrdiff_t = :: std :: os :: raw :: c_long ; pub type __darwin_size_t = :: std :: os :: raw :: c_ulong ; pub type __darwin_va_list = __builtin_va_list ; pub type __darwin_wchar_t = :: std :: os :: raw :: c_int ; pub type __darwin_rune_t = __darwin_wchar_t ; pub type __darwin_wint_t = :: std :: os :: raw :: c_int ; pub type __darwin_clock_t = :: std :: os :: raw :: c_ulong ; pub type __darwin_socklen_t = __uint32_t ; pub type __darwin_ssize_t = :: std :: os :: raw :: c_long ; pub type __darwin_time_t = :: std :: os :: raw :: c_long ; pub type __darwin_blkcnt_t = __int64_t ; pub type __darwin_blksize_t = __int32_t ; pub type __darwin_dev_t = __int32_t ; pub type __darwin_fsblkcnt_t = :: std :: os :: raw :: c_uint ; pub type __darwin_fsfilcnt_t = :: std :: os :: raw :: c_uint ; pub type __darwin_gid_t = __uint32_t ; pub type __darwin_id_t = __uint32_t ; pub type __darwin_ino64_t = __uint64_t ; pub type __darwin_ino_t = __darwin_ino64_t ; pub type __darwin_mach_port_name_t = __darwin_natural_t ; pub type __darwin_mach_port_t = __darwin_mach_port_name_t ; pub type __darwin_mode_t = __uint16_t ; pub type __darwin_off_t = __int64_t ; pub type __darwin_pid_t = __int32_t ; pub type __darwin_sigset_t = __uint32_t ; pub type __darwin_suseconds_t = __int32_t ; pub type __darwin_uid_t = __uint32_t ; pub type __darwin_useconds_t = __uint32_t ; pub type __darwin_uuid_t = [ :: std :: os :: raw :: c_uchar ; 16usize ] ; pub type __darwin_uuid_string_t = [ :: std :: os :: raw :: c_char ; 37usize ] ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __darwin_pthread_handler_rec { pub __routine : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) > , pub __arg : * mut :: std :: os :: raw :: c_void , pub __next : * mut __darwin_pthread_handler_rec , } # [ test ] fn bindgen_test_layout___darwin_pthread_handler_rec ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_pthread_handler_rec > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( __darwin_pthread_handler_rec ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_pthread_handler_rec > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __darwin_pthread_handler_rec ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_pthread_handler_rec > ( ) ) ) . __routine as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_pthread_handler_rec ) , "::" , stringify ! ( __routine ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_pthread_handler_rec > ( ) ) ) . __arg as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_pthread_handler_rec ) , "::" , stringify ! ( __arg ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_pthread_handler_rec > ( ) ) ) . __next as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_pthread_handler_rec ) , "::" , stringify ! ( __next ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _opaque_pthread_attr_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 56usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_attr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_attr_t > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_attr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_attr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_attr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_attr_t > ( ) ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_attr_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_attr_t > ( ) ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_attr_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _opaque_pthread_cond_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 40usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_cond_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_cond_t > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_cond_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_cond_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_cond_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_cond_t > ( ) ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_cond_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_cond_t > ( ) ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_cond_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _opaque_pthread_condattr_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 8usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_condattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_condattr_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_condattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_condattr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_condattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_condattr_t > ( ) ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_condattr_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_condattr_t > ( ) ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_condattr_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _opaque_pthread_mutex_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 56usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_mutex_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_mutex_t > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_mutex_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_mutex_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_mutex_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_mutex_t > ( ) ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_mutex_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_mutex_t > ( ) ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_mutex_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _opaque_pthread_mutexattr_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 8usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_mutexattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_mutexattr_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_mutexattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_mutexattr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_mutexattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_mutexattr_t > ( ) ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_mutexattr_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_mutexattr_t > ( ) ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_mutexattr_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _opaque_pthread_once_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 8usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_once_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_once_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_once_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_once_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_once_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_once_t > ( ) ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_once_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_once_t > ( ) ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_once_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _opaque_pthread_rwlock_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 192usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_rwlock_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_rwlock_t > ( ) , 200usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_rwlock_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_rwlock_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_rwlock_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_rwlock_t > ( ) ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_rwlock_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_rwlock_t > ( ) ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_rwlock_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _opaque_pthread_rwlockattr_t { pub __sig : :: std :: os :: raw :: c_long , pub __opaque : [ :: std :: os :: raw :: c_char ; 16usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_rwlockattr_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_rwlockattr_t > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_rwlockattr_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_rwlockattr_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_rwlockattr_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_rwlockattr_t > ( ) ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_rwlockattr_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_rwlockattr_t > ( ) ) ) . __opaque as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_rwlockattr_t ) , "::" , stringify ! ( __opaque ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct _opaque_pthread_t { pub __sig : :: std :: os :: raw :: c_long , pub __cleanup_stack : * mut __darwin_pthread_handler_rec , pub __opaque : [ :: std :: os :: raw :: c_char ; 8176usize ] , } # [ test ] fn bindgen_test_layout__opaque_pthread_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _opaque_pthread_t > ( ) , 8192usize , concat ! ( "Size of: " , stringify ! ( _opaque_pthread_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _opaque_pthread_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _opaque_pthread_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_t > ( ) ) ) . __sig as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_t ) , "::" , stringify ! ( __sig ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_t > ( ) ) ) . __cleanup_stack as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_t ) , "::" , stringify ! ( __cleanup_stack ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _opaque_pthread_t > ( ) ) ) . __opaque as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( _opaque_pthread_t ) , "::" , stringify ! ( __opaque ) ) ) ; } pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t ; pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t ; pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t ; pub type __darwin_pthread_key_t = :: std :: os :: raw :: c_ulong ; pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t ; pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t ; pub type __darwin_pthread_once_t = _opaque_pthread_once_t ; pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t ; pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t ; pub type __darwin_pthread_t = * mut _opaque_pthread_t ; pub type __darwin_nl_item = :: std :: os :: raw :: c_int ; pub type __darwin_wctrans_t = :: std :: os :: raw :: c_int ; pub type __darwin_wctype_t = __uint32_t ; pub type u_int8_t = :: std :: os :: raw :: c_uchar ; pub type u_int16_t = :: std :: os :: raw :: c_ushort ; pub type u_int32_t = :: std :: os :: raw :: c_uint ; pub type u_int64_t = :: std :: os :: raw :: c_ulonglong ; pub type register_t = i64 ; pub type user_addr_t = u_int64_t ; pub type user_size_t = u_int64_t ; pub type user_ssize_t = i64 ; pub type user_long_t = i64 ; pub type user_ulong_t = u_int64_t ; pub type user_time_t = i64 ; pub type user_off_t = i64 ; pub type syscall_arg_t = u_int64_t ; pub type va_list = __darwin_va_list ; extern "C" { pub fn renameat ( arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn renamex_np ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_uint ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn renameatx_np ( arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : * const :: std :: os :: raw :: c_char , arg5 : :: std :: os :: raw :: c_uint ) -> :: std :: os :: raw :: c_int ; } pub type fpos_t = __darwin_off_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __sbuf { pub _base : * mut :: std :: os :: raw :: c_uchar , pub _size : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout___sbuf ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __sbuf > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( __sbuf ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __sbuf > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __sbuf ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sbuf > ( ) ) ) . _base as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __sbuf ) , "::" , stringify ! ( _base ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sbuf > ( ) ) ) . _size as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __sbuf ) , "::" , stringify ! ( _size ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __sFILEX { _unused : [ u8 ; 0 ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __sFILE { pub _p : * mut :: std :: os :: raw :: c_uchar , pub _r : :: std :: os :: raw :: c_int , pub _w : :: std :: os :: raw :: c_int , pub _flags : :: std :: os :: raw :: c_short , pub _file : :: std :: os :: raw :: c_short , pub _bf : __sbuf , pub _lbfsize : :: std :: os :: raw :: c_int , pub _cookie : * mut :: std :: os :: raw :: c_void , pub _close : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > , pub _read : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int > , pub _seek : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void , arg2 : fpos_t , arg3 : :: std :: os :: raw :: c_int ) -> fpos_t > , pub _write : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int > , pub _ub : __sbuf , pub _extra : * mut __sFILEX , pub _ur : :: std :: os :: raw :: c_int , pub _ubuf : [ :: std :: os :: raw :: c_uchar ; 3usize ] , pub _nbuf : [ :: std :: os :: raw :: c_uchar ; 1usize ] , pub _lb : __sbuf , pub _blksize : :: std :: os :: raw :: c_int , pub _offset : fpos_t , } # [ test ] fn bindgen_test_layout___sFILE ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __sFILE > ( ) , 152usize , concat ! ( "Size of: " , stringify ! ( __sFILE ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __sFILE > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __sFILE ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sFILE > ( ) ) ) . _p as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __sFILE ) , "::" , stringify ! ( _p ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sFILE > ( ) ) ) . _r as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __sFILE ) , "::" , stringify ! ( _r ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sFILE > ( ) ) ) . _w as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( __sFILE ) , "::" , stringify ! ( _w ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sFILE > ( ) ) ) . _flags as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __sFILE ) , "::" , stringify ! ( _flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sFILE > ( ) ) ) . _file as * const _ as usize } , 18usize , concat ! ( "Offset of field: " , stringify ! ( __sFILE ) , "::" , stringify ! ( _file ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sFILE > ( ) ) ) . _bf as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( __sFILE ) , "::" , stringify ! ( _bf ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sFILE > ( ) ) ) . _lbfsize as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( __sFILE ) , "::" , stringify ! ( _lbfsize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sFILE > ( ) ) ) . _cookie as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( __sFILE ) , "::" , stringify ! ( _cookie ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sFILE > ( ) ) ) . _close as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( __sFILE ) , "::" , stringify ! ( _close ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sFILE > ( ) ) ) . _read as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( __sFILE ) , "::" , stringify ! ( _read ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sFILE > ( ) ) ) . _seek as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( __sFILE ) , "::" , stringify ! ( _seek ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sFILE > ( ) ) ) . _write as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( __sFILE ) , "::" , stringify ! ( _write ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sFILE > ( ) ) ) . _ub as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( __sFILE ) , "::" , stringify ! ( _ub ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sFILE > ( ) ) ) . _extra as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( __sFILE ) , "::" , stringify ! ( _extra ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sFILE > ( ) ) ) . _ur as * const _ as usize } , 112usize , concat ! ( "Offset of field: " , stringify ! ( __sFILE ) , "::" , stringify ! ( _ur ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sFILE > ( ) ) ) . _ubuf as * const _ as usize } , 116usize , concat ! ( "Offset of field: " , stringify ! ( __sFILE ) , "::" , stringify ! ( _ubuf ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sFILE > ( ) ) ) . _nbuf as * const _ as usize } , 119usize , concat ! ( "Offset of field: " , stringify ! ( __sFILE ) , "::" , stringify ! ( _nbuf ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sFILE > ( ) ) ) . _lb as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( __sFILE ) , "::" , stringify ! ( _lb ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sFILE > ( ) ) ) . _blksize as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( __sFILE ) , "::" , stringify ! ( _blksize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sFILE > ( ) ) ) . _offset as * const _ as usize } , 144usize , concat ! ( "Offset of field: " , stringify ! ( __sFILE ) , "::" , stringify ! ( _offset ) ) ) ; } pub type FILE = __sFILE ; extern "C" { pub static mut __stdinp : * mut FILE ; } extern "C" { pub static mut __stdoutp : * mut FILE ; } extern "C" { pub static mut __stderrp : * mut FILE ; } extern "C" { pub fn clearerr ( arg1 : * mut FILE ) ; } extern "C" { pub fn fclose ( arg1 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn feof ( arg1 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ferror ( arg1 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fflush ( arg1 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fgetc ( arg1 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fgetpos ( arg1 : * mut FILE , arg2 : * mut fpos_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fgets ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut FILE ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn fopen ( __filename : * const :: std :: os :: raw :: c_char , __mode : * const :: std :: os :: raw :: c_char ) -> * mut FILE ; } extern "C" { pub fn fprintf ( arg1 : * mut FILE , arg2 : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fputc ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fputs ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fread ( __ptr : * mut :: std :: os :: raw :: c_void , __size : usize , __nitems : usize , __stream : * mut FILE ) -> usize ; } extern "C" { pub fn freopen ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut FILE ) -> * mut FILE ; } extern "C" { pub fn fscanf ( arg1 : * mut FILE , arg2 : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fseek ( arg1 : * mut FILE , arg2 : :: std :: os :: raw :: c_long , arg3 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fsetpos ( arg1 : * mut FILE , arg2 : * const fpos_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ftell ( arg1 : * mut FILE ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn fwrite ( __ptr : * const :: std :: os :: raw :: c_void , __size : usize , __nitems : usize , __stream : * mut FILE ) -> usize ; } extern "C" { pub fn getc ( arg1 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getchar ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn gets ( arg1 : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn perror ( arg1 : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn printf ( arg1 : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putc ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putchar ( arg1 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn puts ( arg1 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn remove ( arg1 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn rename ( __old : * const :: std :: os :: raw :: c_char , __new : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn rewind ( arg1 : * mut FILE ) ; } extern "C" { pub fn scanf ( arg1 : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setbuf ( arg1 : * mut FILE , arg2 : * mut :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn setvbuf ( arg1 : * mut FILE , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sprintf ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sscanf ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn tmpfile ( ) -> * mut FILE ; } extern "C" { pub fn tmpnam ( arg1 : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn ungetc ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vfprintf ( arg1 : * mut FILE , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vprintf ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vsprintf ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ctermid ( arg1 : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn fdopen ( arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_char ) -> * mut FILE ; } extern "C" { pub fn fileno ( arg1 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pclose ( arg1 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn popen ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char ) -> * mut FILE ; } extern "C" { pub fn __srget ( arg1 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __svfscanf ( arg1 : * mut FILE , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __swbuf ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn flockfile ( arg1 : * mut FILE ) ; } extern "C" { pub fn ftrylockfile ( arg1 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn funlockfile ( arg1 : * mut FILE ) ; } extern "C" { pub fn getc_unlocked ( arg1 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getchar_unlocked ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putc_unlocked ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putchar_unlocked ( arg1 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getw ( arg1 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putw ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn tempnam ( __dir : * const :: std :: os :: raw :: c_char , __prefix : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } pub type off_t = __darwin_off_t ; extern "C" { pub fn fseeko ( __stream : * mut FILE , __offset : off_t , __whence : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ftello ( __stream : * mut FILE ) -> off_t ; } extern "C" { pub fn snprintf ( __str : * mut :: std :: os :: raw :: c_char , __size : :: std :: os :: raw :: c_ulong , __format : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vfscanf ( __stream : * mut FILE , __format : * const :: std :: os :: raw :: c_char , arg1 : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vscanf ( __format : * const :: std :: os :: raw :: c_char , arg1 : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vsnprintf ( __str : * mut :: std :: os :: raw :: c_char , __size : :: std :: os :: raw :: c_ulong , __format : * const :: std :: os :: raw :: c_char , arg1 : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vsscanf ( __str : * const :: std :: os :: raw :: c_char , __format : * const :: std :: os :: raw :: c_char , arg1 : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn dprintf ( arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vdprintf ( arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getdelim ( __linep : * mut * mut :: std :: os :: raw :: c_char , __linecapp : * mut usize , __delimiter : :: std :: os :: raw :: c_int , __stream : * mut FILE ) -> isize ; } extern "C" { pub fn getline ( __linep : * mut * mut :: std :: os :: raw :: c_char , __linecapp : * mut usize , __stream : * mut FILE ) -> isize ; } extern "C" { pub fn fmemopen ( __buf : * mut :: std :: os :: raw :: c_void , __size : usize , __mode : * const :: std :: os :: raw :: c_char ) -> * mut FILE ; } extern "C" { pub fn open_memstream ( __bufp : * mut * mut :: std :: os :: raw :: c_char , __sizep : * mut usize ) -> * mut FILE ; } extern "C" { pub static sys_nerr : :: std :: os :: raw :: c_int ; } extern "C" { pub static mut sys_errlist : [ * const :: std :: os :: raw :: c_char ; 0usize ] ; } extern "C" { pub fn asprintf ( arg1 : * mut * mut :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ctermid_r ( arg1 : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn fgetln ( arg1 : * mut FILE , arg2 : * mut usize ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn fmtcheck ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn fpurge ( arg1 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setbuffer ( arg1 : * mut FILE , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn setlinebuf ( arg1 : * mut FILE ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vasprintf ( arg1 : * mut * mut :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn zopen ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int ) -> * mut FILE ; } extern "C" { pub fn funopen ( arg1 : * const :: std :: os :: raw :: c_void , arg2 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int > , arg3 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int > , arg4 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void , arg2 : fpos_t , arg3 : :: std :: os :: raw :: c_int ) -> fpos_t > , arg5 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > ) -> * mut FILE ; } extern "C" { pub fn __sprintf_chk ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int , arg3 : usize , arg4 : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __snprintf_chk ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : usize , arg3 : :: std :: os :: raw :: c_int , arg4 : usize , arg5 : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __vsprintf_chk ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int , arg3 : usize , arg4 : * const :: std :: os :: raw :: c_char , arg5 : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn __vsnprintf_chk ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : usize , arg3 : :: std :: os :: raw :: c_int , arg4 : usize , arg5 : * const :: std :: os :: raw :: c_char , arg6 : * mut __va_list_tag ) -> :: std :: os :: raw :: c_int ; } pub const idtype_t_P_ALL : idtype_t = 0 ; pub const idtype_t_P_PID : idtype_t = 1 ; pub const idtype_t_P_PGID : idtype_t = 2 ; pub type idtype_t = u32 ; pub type pid_t = __darwin_pid_t ; pub type id_t = __darwin_id_t ; pub type sig_atomic_t = :: std :: os :: raw :: c_int ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __darwin_i386_thread_state { pub __eax : :: std :: os :: raw :: c_uint , pub __ebx : :: std :: os :: raw :: c_uint , pub __ecx : :: std :: os :: raw :: c_uint , pub __edx : :: std :: os :: raw :: c_uint , pub __edi : :: std :: os :: raw :: c_uint , pub __esi : :: std :: os :: raw :: c_uint , pub __ebp : :: std :: os :: raw :: c_uint , pub __esp : :: std :: os :: raw :: c_uint , pub __ss : :: std :: os :: raw :: c_uint , pub __eflags : :: std :: os :: raw :: c_uint , pub __eip : :: std :: os :: raw :: c_uint , pub __cs : :: std :: os :: raw :: c_uint , pub __ds : :: std :: os :: raw :: c_uint , pub __es : :: std :: os :: raw :: c_uint , pub __fs : :: std :: os :: raw :: c_uint , pub __gs : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout___darwin_i386_thread_state ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_i386_thread_state > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( __darwin_i386_thread_state ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_i386_thread_state > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __darwin_i386_thread_state ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_thread_state > ( ) ) ) . __eax as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_thread_state ) , "::" , stringify ! ( __eax ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_thread_state > ( ) ) ) . __ebx as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_thread_state ) , "::" , stringify ! ( __ebx ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_thread_state > ( ) ) ) . __ecx as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_thread_state ) , "::" , stringify ! ( __ecx ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_thread_state > ( ) ) ) . __edx as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_thread_state ) , "::" , stringify ! ( __edx ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_thread_state > ( ) ) ) . __edi as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_thread_state ) , "::" , stringify ! ( __edi ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_thread_state > ( ) ) ) . __esi as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_thread_state ) , "::" , stringify ! ( __esi ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_thread_state > ( ) ) ) . __ebp as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_thread_state ) , "::" , stringify ! ( __ebp ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_thread_state > ( ) ) ) . __esp as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_thread_state ) , "::" , stringify ! ( __esp ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_thread_state > ( ) ) ) . __ss as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_thread_state ) , "::" , stringify ! ( __ss ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_thread_state > ( ) ) ) . __eflags as * const _ as usize } , 36usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_thread_state ) , "::" , stringify ! ( __eflags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_thread_state > ( ) ) ) . __eip as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_thread_state ) , "::" , stringify ! ( __eip ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_thread_state > ( ) ) ) . __cs as * const _ as usize } , 44usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_thread_state ) , "::" , stringify ! ( __cs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_thread_state > ( ) ) ) . __ds as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_thread_state ) , "::" , stringify ! ( __ds ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_thread_state > ( ) ) ) . __es as * const _ as usize } , 52usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_thread_state ) , "::" , stringify ! ( __es ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_thread_state > ( ) ) ) . __fs as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_thread_state ) , "::" , stringify ! ( __fs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_thread_state > ( ) ) ) . __gs as * const _ as usize } , 60usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_thread_state ) , "::" , stringify ! ( __gs ) ) ) ; } # [ repr ( C ) ] # [ repr ( align ( 2 ) ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __darwin_fp_control { pub _bitfield_1 : __BindgenBitfieldUnit < [ u8 ; 2usize ] , u8 > , } # [ test ] fn bindgen_test_layout___darwin_fp_control ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_fp_control > ( ) , 2usize , concat ! ( "Size of: " , stringify ! ( __darwin_fp_control ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_fp_control > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( __darwin_fp_control ) ) ) ; } impl __darwin_fp_control { # [ inline ] pub fn __invalid ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 0usize , 1u8 ) as u16 ) } } # [ inline ] pub fn set___invalid ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 0usize , 1u8 , val as u64 ) } } # [ inline ] pub fn __denorm ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 1usize , 1u8 ) as u16 ) } } # [ inline ] pub fn set___denorm ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 1usize , 1u8 , val as u64 ) } } # [ inline ] pub fn __zdiv ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 2usize , 1u8 ) as u16 ) } } # [ inline ] pub fn set___zdiv ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 2usize , 1u8 , val as u64 ) } } # [ inline ] pub fn __ovrfl ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 3usize , 1u8 ) as u16 ) } } # [ inline ] pub fn set___ovrfl ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 3usize , 1u8 , val as u64 ) } } # [ inline ] pub fn __undfl ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 4usize , 1u8 ) as u16 ) } } # [ inline ] pub fn set___undfl ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 4usize , 1u8 , val as u64 ) } } # [ inline ] pub fn __precis ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 5usize , 1u8 ) as u16 ) } } # [ inline ] pub fn set___precis ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 5usize , 1u8 , val as u64 ) } } # [ inline ] pub fn __pc ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 8usize , 2u8 ) as u16 ) } } # [ inline ] pub fn set___pc ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 8usize , 2u8 , val as u64 ) } } # [ inline ] pub fn __rc ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 10usize , 2u8 ) as u16 ) } } # [ inline ] pub fn set___rc ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 10usize , 2u8 , val as u64 ) } } # [ inline ] pub fn new_bitfield_1 ( __invalid : :: std :: os :: raw :: c_ushort , __denorm : :: std :: os :: raw :: c_ushort , __zdiv : :: std :: os :: raw :: c_ushort , __ovrfl : :: std :: os :: raw :: c_ushort , __undfl : :: std :: os :: raw :: c_ushort , __precis : :: std :: os :: raw :: c_ushort , __pc : :: std :: os :: raw :: c_ushort , __rc : :: std :: os :: raw :: c_ushort ) -> __BindgenBitfieldUnit < [ u8 ; 2usize ] , u8 > { let mut __bindgen_bitfield_unit : __BindgenBitfieldUnit < [ u8 ; 2usize ] , u8 > = Default :: default ( ) ; __bindgen_bitfield_unit . set ( 0usize , 1u8 , { let __invalid : u16 = unsafe { :: std :: mem :: transmute ( __invalid ) } ; __invalid as u64 } ) ; __bindgen_bitfield_unit . set ( 1usize , 1u8 , { let __denorm : u16 = unsafe { :: std :: mem :: transmute ( __denorm ) } ; __denorm as u64 } ) ; __bindgen_bitfield_unit . set ( 2usize , 1u8 , { let __zdiv : u16 = unsafe { :: std :: mem :: transmute ( __zdiv ) } ; __zdiv as u64 } ) ; __bindgen_bitfield_unit . set ( 3usize , 1u8 , { let __ovrfl : u16 = unsafe { :: std :: mem :: transmute ( __ovrfl ) } ; __ovrfl as u64 } ) ; __bindgen_bitfield_unit . set ( 4usize , 1u8 , { let __undfl : u16 = unsafe { :: std :: mem :: transmute ( __undfl ) } ; __undfl as u64 } ) ; __bindgen_bitfield_unit . set ( 5usize , 1u8 , { let __precis : u16 = unsafe { :: std :: mem :: transmute ( __precis ) } ; __precis as u64 } ) ; __bindgen_bitfield_unit . set ( 8usize , 2u8 , { let __pc : u16 = unsafe { :: std :: mem :: transmute ( __pc ) } ; __pc as u64 } ) ; __bindgen_bitfield_unit . set ( 10usize , 2u8 , { let __rc : u16 = unsafe { :: std :: mem :: transmute ( __rc ) } ; __rc as u64 } ) ; __bindgen_bitfield_unit } } pub type __darwin_fp_control_t = __darwin_fp_control ; # [ repr ( C ) ] # [ repr ( align ( 2 ) ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __darwin_fp_status { pub _bitfield_1 : __BindgenBitfieldUnit < [ u8 ; 2usize ] , u8 > , } # [ test ] fn bindgen_test_layout___darwin_fp_status ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_fp_status > ( ) , 2usize , concat ! ( "Size of: " , stringify ! ( __darwin_fp_status ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_fp_status > ( ) , 2usize , concat ! ( "Alignment of " , stringify ! ( __darwin_fp_status ) ) ) ; } impl __darwin_fp_status { # [ inline ] pub fn __invalid ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 0usize , 1u8 ) as u16 ) } } # [ inline ] pub fn set___invalid ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 0usize , 1u8 , val as u64 ) } } # [ inline ] pub fn __denorm ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 1usize , 1u8 ) as u16 ) } } # [ inline ] pub fn set___denorm ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 1usize , 1u8 , val as u64 ) } } # [ inline ] pub fn __zdiv ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 2usize , 1u8 ) as u16 ) } } # [ inline ] pub fn set___zdiv ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 2usize , 1u8 , val as u64 ) } } # [ inline ] pub fn __ovrfl ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 3usize , 1u8 ) as u16 ) } } # [ inline ] pub fn set___ovrfl ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 3usize , 1u8 , val as u64 ) } } # [ inline ] pub fn __undfl ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 4usize , 1u8 ) as u16 ) } } # [ inline ] pub fn set___undfl ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 4usize , 1u8 , val as u64 ) } } # [ inline ] pub fn __precis ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 5usize , 1u8 ) as u16 ) } } # [ inline ] pub fn set___precis ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 5usize , 1u8 , val as u64 ) } } # [ inline ] pub fn __stkflt ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 6usize , 1u8 ) as u16 ) } } # [ inline ] pub fn set___stkflt ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 6usize , 1u8 , val as u64 ) } } # [ inline ] pub fn __errsumm ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 7usize , 1u8 ) as u16 ) } } # [ inline ] pub fn set___errsumm ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 7usize , 1u8 , val as u64 ) } } # [ inline ] pub fn __c0 ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 8usize , 1u8 ) as u16 ) } } # [ inline ] pub fn set___c0 ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 8usize , 1u8 , val as u64 ) } } # [ inline ] pub fn __c1 ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 9usize , 1u8 ) as u16 ) } } # [ inline ] pub fn set___c1 ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 9usize , 1u8 , val as u64 ) } } # [ inline ] pub fn __c2 ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 10usize , 1u8 ) as u16 ) } } # [ inline ] pub fn set___c2 ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 10usize , 1u8 , val as u64 ) } } # [ inline ] pub fn __tos ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 11usize , 3u8 ) as u16 ) } } # [ inline ] pub fn set___tos ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 11usize , 3u8 , val as u64 ) } } # [ inline ] pub fn __c3 ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 14usize , 1u8 ) as u16 ) } } # [ inline ] pub fn set___c3 ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 14usize , 1u8 , val as u64 ) } } # [ inline ] pub fn __busy ( & self ) -> :: std :: os :: raw :: c_ushort { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 15usize , 1u8 ) as u16 ) } } # [ inline ] pub fn set___busy ( & mut self , val : :: std :: os :: raw :: c_ushort ) { unsafe { let val : u16 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 15usize , 1u8 , val as u64 ) } } # [ inline ] pub fn new_bitfield_1 ( __invalid : :: std :: os :: raw :: c_ushort , __denorm : :: std :: os :: raw :: c_ushort , __zdiv : :: std :: os :: raw :: c_ushort , __ovrfl : :: std :: os :: raw :: c_ushort , __undfl : :: std :: os :: raw :: c_ushort , __precis : :: std :: os :: raw :: c_ushort , __stkflt : :: std :: os :: raw :: c_ushort , __errsumm : :: std :: os :: raw :: c_ushort , __c0 : :: std :: os :: raw :: c_ushort , __c1 : :: std :: os :: raw :: c_ushort , __c2 : :: std :: os :: raw :: c_ushort , __tos : :: std :: os :: raw :: c_ushort , __c3 : :: std :: os :: raw :: c_ushort , __busy : :: std :: os :: raw :: c_ushort ) -> __BindgenBitfieldUnit < [ u8 ; 2usize ] , u8 > { let mut __bindgen_bitfield_unit : __BindgenBitfieldUnit < [ u8 ; 2usize ] , u8 > = Default :: default ( ) ; __bindgen_bitfield_unit . set ( 0usize , 1u8 , { let __invalid : u16 = unsafe { :: std :: mem :: transmute ( __invalid ) } ; __invalid as u64 } ) ; __bindgen_bitfield_unit . set ( 1usize , 1u8 , { let __denorm : u16 = unsafe { :: std :: mem :: transmute ( __denorm ) } ; __denorm as u64 } ) ; __bindgen_bitfield_unit . set ( 2usize , 1u8 , { let __zdiv : u16 = unsafe { :: std :: mem :: transmute ( __zdiv ) } ; __zdiv as u64 } ) ; __bindgen_bitfield_unit . set ( 3usize , 1u8 , { let __ovrfl : u16 = unsafe { :: std :: mem :: transmute ( __ovrfl ) } ; __ovrfl as u64 } ) ; __bindgen_bitfield_unit . set ( 4usize , 1u8 , { let __undfl : u16 = unsafe { :: std :: mem :: transmute ( __undfl ) } ; __undfl as u64 } ) ; __bindgen_bitfield_unit . set ( 5usize , 1u8 , { let __precis : u16 = unsafe { :: std :: mem :: transmute ( __precis ) } ; __precis as u64 } ) ; __bindgen_bitfield_unit . set ( 6usize , 1u8 , { let __stkflt : u16 = unsafe { :: std :: mem :: transmute ( __stkflt ) } ; __stkflt as u64 } ) ; __bindgen_bitfield_unit . set ( 7usize , 1u8 , { let __errsumm : u16 = unsafe { :: std :: mem :: transmute ( __errsumm ) } ; __errsumm as u64 } ) ; __bindgen_bitfield_unit . set ( 8usize , 1u8 , { let __c0 : u16 = unsafe { :: std :: mem :: transmute ( __c0 ) } ; __c0 as u64 } ) ; __bindgen_bitfield_unit . set ( 9usize , 1u8 , { let __c1 : u16 = unsafe { :: std :: mem :: transmute ( __c1 ) } ; __c1 as u64 } ) ; __bindgen_bitfield_unit . set ( 10usize , 1u8 , { let __c2 : u16 = unsafe { :: std :: mem :: transmute ( __c2 ) } ; __c2 as u64 } ) ; __bindgen_bitfield_unit . set ( 11usize , 3u8 , { let __tos : u16 = unsafe { :: std :: mem :: transmute ( __tos ) } ; __tos as u64 } ) ; __bindgen_bitfield_unit . set ( 14usize , 1u8 , { let __c3 : u16 = unsafe { :: std :: mem :: transmute ( __c3 ) } ; __c3 as u64 } ) ; __bindgen_bitfield_unit . set ( 15usize , 1u8 , { let __busy : u16 = unsafe { :: std :: mem :: transmute ( __busy ) } ; __busy as u64 } ) ; __bindgen_bitfield_unit } } pub type __darwin_fp_status_t = __darwin_fp_status ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __darwin_mmst_reg { pub __mmst_reg : [ :: std :: os :: raw :: c_char ; 10usize ] , pub __mmst_rsrv : [ :: std :: os :: raw :: c_char ; 6usize ] , } # [ test ] fn bindgen_test_layout___darwin_mmst_reg ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_mmst_reg > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( __darwin_mmst_reg ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_mmst_reg > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( __darwin_mmst_reg ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_mmst_reg > ( ) ) ) . __mmst_reg as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_mmst_reg ) , "::" , stringify ! ( __mmst_reg ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_mmst_reg > ( ) ) ) . __mmst_rsrv as * const _ as usize } , 10usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_mmst_reg ) , "::" , stringify ! ( __mmst_rsrv ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __darwin_xmm_reg { pub __xmm_reg : [ :: std :: os :: raw :: c_char ; 16usize ] , } # [ test ] fn bindgen_test_layout___darwin_xmm_reg ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_xmm_reg > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( __darwin_xmm_reg ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_xmm_reg > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( __darwin_xmm_reg ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_xmm_reg > ( ) ) ) . __xmm_reg as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_xmm_reg ) , "::" , stringify ! ( __xmm_reg ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __darwin_ymm_reg { pub __ymm_reg : [ :: std :: os :: raw :: c_char ; 32usize ] , } # [ test ] fn bindgen_test_layout___darwin_ymm_reg ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_ymm_reg > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( __darwin_ymm_reg ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_ymm_reg > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( __darwin_ymm_reg ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_ymm_reg > ( ) ) ) . __ymm_reg as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_ymm_reg ) , "::" , stringify ! ( __ymm_reg ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __darwin_zmm_reg { pub __zmm_reg : [ :: std :: os :: raw :: c_char ; 64usize ] , } # [ test ] fn bindgen_test_layout___darwin_zmm_reg ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_zmm_reg > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( __darwin_zmm_reg ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_zmm_reg > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( __darwin_zmm_reg ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_zmm_reg > ( ) ) ) . __zmm_reg as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_zmm_reg ) , "::" , stringify ! ( __zmm_reg ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __darwin_opmask_reg { pub __opmask_reg : [ :: std :: os :: raw :: c_char ; 8usize ] , } # [ test ] fn bindgen_test_layout___darwin_opmask_reg ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_opmask_reg > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __darwin_opmask_reg ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_opmask_reg > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( __darwin_opmask_reg ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_opmask_reg > ( ) ) ) . __opmask_reg as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_opmask_reg ) , "::" , stringify ! ( __opmask_reg ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __darwin_i386_float_state { pub __fpu_reserved : [ :: std :: os :: raw :: c_int ; 2usize ] , pub __fpu_fcw : __darwin_fp_control , pub __fpu_fsw : __darwin_fp_status , pub __fpu_ftw : __uint8_t , pub __fpu_rsrv1 : __uint8_t , pub __fpu_fop : __uint16_t , pub __fpu_ip : __uint32_t , pub __fpu_cs : __uint16_t , pub __fpu_rsrv2 : __uint16_t , pub __fpu_dp : __uint32_t , pub __fpu_ds : __uint16_t , pub __fpu_rsrv3 : __uint16_t , pub __fpu_mxcsr : __uint32_t , pub __fpu_mxcsrmask : __uint32_t , pub __fpu_stmm0 : __darwin_mmst_reg , pub __fpu_stmm1 : __darwin_mmst_reg , pub __fpu_stmm2 : __darwin_mmst_reg , pub __fpu_stmm3 : __darwin_mmst_reg , pub __fpu_stmm4 : __darwin_mmst_reg , pub __fpu_stmm5 : __darwin_mmst_reg , pub __fpu_stmm6 : __darwin_mmst_reg , pub __fpu_stmm7 : __darwin_mmst_reg , pub __fpu_xmm0 : __darwin_xmm_reg , pub __fpu_xmm1 : __darwin_xmm_reg , pub __fpu_xmm2 : __darwin_xmm_reg , pub __fpu_xmm3 : __darwin_xmm_reg , pub __fpu_xmm4 : __darwin_xmm_reg , pub __fpu_xmm5 : __darwin_xmm_reg , pub __fpu_xmm6 : __darwin_xmm_reg , pub __fpu_xmm7 : __darwin_xmm_reg , pub __fpu_rsrv4 : [ :: std :: os :: raw :: c_char ; 224usize ] , pub __fpu_reserved1 : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout___darwin_i386_float_state ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_i386_float_state > ( ) , 524usize , concat ! ( "Size of: " , stringify ! ( __darwin_i386_float_state ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_i386_float_state > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __darwin_i386_float_state ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_reserved as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_reserved ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_fcw as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_fcw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_fsw as * const _ as usize } , 10usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_fsw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_ftw as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_ftw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_rsrv1 as * const _ as usize } , 13usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_rsrv1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_fop as * const _ as usize } , 14usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_fop ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_ip as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_ip ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_cs as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_cs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_rsrv2 as * const _ as usize } , 22usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_rsrv2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_dp as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_dp ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_ds as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_ds ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_rsrv3 as * const _ as usize } , 30usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_rsrv3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_mxcsr as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_mxcsr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_mxcsrmask as * const _ as usize } , 36usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_mxcsrmask ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_stmm0 as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_stmm1 as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_stmm2 as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_stmm3 as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_stmm4 as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_stmm5 as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_stmm6 as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_stmm7 as * const _ as usize } , 152usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_xmm0 as * const _ as usize } , 168usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_xmm1 as * const _ as usize } , 184usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_xmm2 as * const _ as usize } , 200usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_xmm3 as * const _ as usize } , 216usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_xmm4 as * const _ as usize } , 232usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_xmm5 as * const _ as usize } , 248usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_xmm6 as * const _ as usize } , 264usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_xmm7 as * const _ as usize } , 280usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_rsrv4 as * const _ as usize } , 296usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_rsrv4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_float_state > ( ) ) ) . __fpu_reserved1 as * const _ as usize } , 520usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_reserved1 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __darwin_i386_avx_state { pub __fpu_reserved : [ :: std :: os :: raw :: c_int ; 2usize ] , pub __fpu_fcw : __darwin_fp_control , pub __fpu_fsw : __darwin_fp_status , pub __fpu_ftw : __uint8_t , pub __fpu_rsrv1 : __uint8_t , pub __fpu_fop : __uint16_t , pub __fpu_ip : __uint32_t , pub __fpu_cs : __uint16_t , pub __fpu_rsrv2 : __uint16_t , pub __fpu_dp : __uint32_t , pub __fpu_ds : __uint16_t , pub __fpu_rsrv3 : __uint16_t , pub __fpu_mxcsr : __uint32_t , pub __fpu_mxcsrmask : __uint32_t , pub __fpu_stmm0 : __darwin_mmst_reg , pub __fpu_stmm1 : __darwin_mmst_reg , pub __fpu_stmm2 : __darwin_mmst_reg , pub __fpu_stmm3 : __darwin_mmst_reg , pub __fpu_stmm4 : __darwin_mmst_reg , pub __fpu_stmm5 : __darwin_mmst_reg , pub __fpu_stmm6 : __darwin_mmst_reg , pub __fpu_stmm7 : __darwin_mmst_reg , pub __fpu_xmm0 : __darwin_xmm_reg , pub __fpu_xmm1 : __darwin_xmm_reg , pub __fpu_xmm2 : __darwin_xmm_reg , pub __fpu_xmm3 : __darwin_xmm_reg , pub __fpu_xmm4 : __darwin_xmm_reg , pub __fpu_xmm5 : __darwin_xmm_reg , pub __fpu_xmm6 : __darwin_xmm_reg , pub __fpu_xmm7 : __darwin_xmm_reg , pub __fpu_rsrv4 : [ :: std :: os :: raw :: c_char ; 224usize ] , pub __fpu_reserved1 : :: std :: os :: raw :: c_int , pub __avx_reserved1 : [ :: std :: os :: raw :: c_char ; 64usize ] , pub __fpu_ymmh0 : __darwin_xmm_reg , pub __fpu_ymmh1 : __darwin_xmm_reg , pub __fpu_ymmh2 : __darwin_xmm_reg , pub __fpu_ymmh3 : __darwin_xmm_reg , pub __fpu_ymmh4 : __darwin_xmm_reg , pub __fpu_ymmh5 : __darwin_xmm_reg , pub __fpu_ymmh6 : __darwin_xmm_reg , pub __fpu_ymmh7 : __darwin_xmm_reg , } # [ test ] fn bindgen_test_layout___darwin_i386_avx_state ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_i386_avx_state > ( ) , 716usize , concat ! ( "Size of: " , stringify ! ( __darwin_i386_avx_state ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_i386_avx_state > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __darwin_i386_avx_state ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_reserved as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_reserved ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_fcw as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_fcw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_fsw as * const _ as usize } , 10usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_fsw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_ftw as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_ftw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_rsrv1 as * const _ as usize } , 13usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_rsrv1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_fop as * const _ as usize } , 14usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_fop ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_ip as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_ip ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_cs as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_cs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_rsrv2 as * const _ as usize } , 22usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_rsrv2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_dp as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_dp ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_ds as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_ds ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_rsrv3 as * const _ as usize } , 30usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_rsrv3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_mxcsr as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_mxcsr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_mxcsrmask as * const _ as usize } , 36usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_mxcsrmask ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_stmm0 as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_stmm0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_stmm1 as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_stmm1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_stmm2 as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_stmm2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_stmm3 as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_stmm3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_stmm4 as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_stmm4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_stmm5 as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_stmm5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_stmm6 as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_stmm6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_stmm7 as * const _ as usize } , 152usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_stmm7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_xmm0 as * const _ as usize } , 168usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_xmm0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_xmm1 as * const _ as usize } , 184usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_xmm1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_xmm2 as * const _ as usize } , 200usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_xmm2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_xmm3 as * const _ as usize } , 216usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_xmm3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_xmm4 as * const _ as usize } , 232usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_xmm4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_xmm5 as * const _ as usize } , 248usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_xmm5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_xmm6 as * const _ as usize } , 264usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_xmm6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_xmm7 as * const _ as usize } , 280usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_xmm7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_rsrv4 as * const _ as usize } , 296usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_rsrv4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_reserved1 as * const _ as usize } , 520usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_reserved1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __avx_reserved1 as * const _ as usize } , 524usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __avx_reserved1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_ymmh0 as * const _ as usize } , 588usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_ymmh0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_ymmh1 as * const _ as usize } , 604usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_ymmh1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_ymmh2 as * const _ as usize } , 620usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_ymmh2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_ymmh3 as * const _ as usize } , 636usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_ymmh3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_ymmh4 as * const _ as usize } , 652usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_ymmh4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_ymmh5 as * const _ as usize } , 668usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_ymmh5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_ymmh6 as * const _ as usize } , 684usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_ymmh6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx_state > ( ) ) ) . __fpu_ymmh7 as * const _ as usize } , 700usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx_state ) , "::" , stringify ! ( __fpu_ymmh7 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __darwin_i386_avx512_state { pub __fpu_reserved : [ :: std :: os :: raw :: c_int ; 2usize ] , pub __fpu_fcw : __darwin_fp_control , pub __fpu_fsw : __darwin_fp_status , pub __fpu_ftw : __uint8_t , pub __fpu_rsrv1 : __uint8_t , pub __fpu_fop : __uint16_t , pub __fpu_ip : __uint32_t , pub __fpu_cs : __uint16_t , pub __fpu_rsrv2 : __uint16_t , pub __fpu_dp : __uint32_t , pub __fpu_ds : __uint16_t , pub __fpu_rsrv3 : __uint16_t , pub __fpu_mxcsr : __uint32_t , pub __fpu_mxcsrmask : __uint32_t , pub __fpu_stmm0 : __darwin_mmst_reg , pub __fpu_stmm1 : __darwin_mmst_reg , pub __fpu_stmm2 : __darwin_mmst_reg , pub __fpu_stmm3 : __darwin_mmst_reg , pub __fpu_stmm4 : __darwin_mmst_reg , pub __fpu_stmm5 : __darwin_mmst_reg , pub __fpu_stmm6 : __darwin_mmst_reg , pub __fpu_stmm7 : __darwin_mmst_reg , pub __fpu_xmm0 : __darwin_xmm_reg , pub __fpu_xmm1 : __darwin_xmm_reg , pub __fpu_xmm2 : __darwin_xmm_reg , pub __fpu_xmm3 : __darwin_xmm_reg , pub __fpu_xmm4 : __darwin_xmm_reg , pub __fpu_xmm5 : __darwin_xmm_reg , pub __fpu_xmm6 : __darwin_xmm_reg , pub __fpu_xmm7 : __darwin_xmm_reg , pub __fpu_rsrv4 : [ :: std :: os :: raw :: c_char ; 224usize ] , pub __fpu_reserved1 : :: std :: os :: raw :: c_int , pub __avx_reserved1 : [ :: std :: os :: raw :: c_char ; 64usize ] , pub __fpu_ymmh0 : __darwin_xmm_reg , pub __fpu_ymmh1 : __darwin_xmm_reg , pub __fpu_ymmh2 : __darwin_xmm_reg , pub __fpu_ymmh3 : __darwin_xmm_reg , pub __fpu_ymmh4 : __darwin_xmm_reg , pub __fpu_ymmh5 : __darwin_xmm_reg , pub __fpu_ymmh6 : __darwin_xmm_reg , pub __fpu_ymmh7 : __darwin_xmm_reg , pub __fpu_k0 : __darwin_opmask_reg , pub __fpu_k1 : __darwin_opmask_reg , pub __fpu_k2 : __darwin_opmask_reg , pub __fpu_k3 : __darwin_opmask_reg , pub __fpu_k4 : __darwin_opmask_reg , pub __fpu_k5 : __darwin_opmask_reg , pub __fpu_k6 : __darwin_opmask_reg , pub __fpu_k7 : __darwin_opmask_reg , pub __fpu_zmmh0 : __darwin_ymm_reg , pub __fpu_zmmh1 : __darwin_ymm_reg , pub __fpu_zmmh2 : __darwin_ymm_reg , pub __fpu_zmmh3 : __darwin_ymm_reg , pub __fpu_zmmh4 : __darwin_ymm_reg , pub __fpu_zmmh5 : __darwin_ymm_reg , pub __fpu_zmmh6 : __darwin_ymm_reg , pub __fpu_zmmh7 : __darwin_ymm_reg , } # [ test ] fn bindgen_test_layout___darwin_i386_avx512_state ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_i386_avx512_state > ( ) , 1036usize , concat ! ( "Size of: " , stringify ! ( __darwin_i386_avx512_state ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_i386_avx512_state > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __darwin_i386_avx512_state ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_reserved as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_reserved ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_fcw as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_fcw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_fsw as * const _ as usize } , 10usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_fsw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_ftw as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_ftw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_rsrv1 as * const _ as usize } , 13usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_rsrv1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_fop as * const _ as usize } , 14usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_fop ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_ip as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_ip ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_cs as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_cs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_rsrv2 as * const _ as usize } , 22usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_rsrv2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_dp as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_dp ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_ds as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_ds ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_rsrv3 as * const _ as usize } , 30usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_rsrv3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_mxcsr as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_mxcsr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_mxcsrmask as * const _ as usize } , 36usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_mxcsrmask ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_stmm0 as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_stmm0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_stmm1 as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_stmm1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_stmm2 as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_stmm2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_stmm3 as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_stmm3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_stmm4 as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_stmm4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_stmm5 as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_stmm5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_stmm6 as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_stmm6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_stmm7 as * const _ as usize } , 152usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_stmm7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_xmm0 as * const _ as usize } , 168usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_xmm0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_xmm1 as * const _ as usize } , 184usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_xmm1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_xmm2 as * const _ as usize } , 200usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_xmm2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_xmm3 as * const _ as usize } , 216usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_xmm3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_xmm4 as * const _ as usize } , 232usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_xmm4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_xmm5 as * const _ as usize } , 248usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_xmm5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_xmm6 as * const _ as usize } , 264usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_xmm6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_xmm7 as * const _ as usize } , 280usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_xmm7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_rsrv4 as * const _ as usize } , 296usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_rsrv4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_reserved1 as * const _ as usize } , 520usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_reserved1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __avx_reserved1 as * const _ as usize } , 524usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __avx_reserved1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_ymmh0 as * const _ as usize } , 588usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_ymmh0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_ymmh1 as * const _ as usize } , 604usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_ymmh1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_ymmh2 as * const _ as usize } , 620usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_ymmh2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_ymmh3 as * const _ as usize } , 636usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_ymmh3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_ymmh4 as * const _ as usize } , 652usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_ymmh4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_ymmh5 as * const _ as usize } , 668usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_ymmh5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_ymmh6 as * const _ as usize } , 684usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_ymmh6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_ymmh7 as * const _ as usize } , 700usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_ymmh7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_k0 as * const _ as usize } , 716usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_k0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_k1 as * const _ as usize } , 724usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_k1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_k2 as * const _ as usize } , 732usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_k2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_k3 as * const _ as usize } , 740usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_k3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_k4 as * const _ as usize } , 748usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_k4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_k5 as * const _ as usize } , 756usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_k5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_k6 as * const _ as usize } , 764usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_k6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_k7 as * const _ as usize } , 772usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_k7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_zmmh0 as * const _ as usize } , 780usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_zmmh0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_zmmh1 as * const _ as usize } , 812usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_zmmh1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_zmmh2 as * const _ as usize } , 844usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_zmmh2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_zmmh3 as * const _ as usize } , 876usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_zmmh3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_zmmh4 as * const _ as usize } , 908usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_zmmh4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_zmmh5 as * const _ as usize } , 940usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_zmmh5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_zmmh6 as * const _ as usize } , 972usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_zmmh6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_avx512_state > ( ) ) ) . __fpu_zmmh7 as * const _ as usize } , 1004usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_avx512_state ) , "::" , stringify ! ( __fpu_zmmh7 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __darwin_i386_exception_state { pub __trapno : __uint16_t , pub __cpu : __uint16_t , pub __err : __uint32_t , pub __faultvaddr : __uint32_t , } # [ test ] fn bindgen_test_layout___darwin_i386_exception_state ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_i386_exception_state > ( ) , 12usize , concat ! ( "Size of: " , stringify ! ( __darwin_i386_exception_state ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_i386_exception_state > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __darwin_i386_exception_state ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_exception_state > ( ) ) ) . __trapno as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_exception_state ) , "::" , stringify ! ( __trapno ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_exception_state > ( ) ) ) . __cpu as * const _ as usize } , 2usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_exception_state ) , "::" , stringify ! ( __cpu ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_exception_state > ( ) ) ) . __err as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_exception_state ) , "::" , stringify ! ( __err ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_i386_exception_state > ( ) ) ) . __faultvaddr as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_i386_exception_state ) , "::" , stringify ! ( __faultvaddr ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __darwin_x86_debug_state32 { pub __dr0 : :: std :: os :: raw :: c_uint , pub __dr1 : :: std :: os :: raw :: c_uint , pub __dr2 : :: std :: os :: raw :: c_uint , pub __dr3 : :: std :: os :: raw :: c_uint , pub __dr4 : :: std :: os :: raw :: c_uint , pub __dr5 : :: std :: os :: raw :: c_uint , pub __dr6 : :: std :: os :: raw :: c_uint , pub __dr7 : :: std :: os :: raw :: c_uint , } # [ test ] fn bindgen_test_layout___darwin_x86_debug_state32 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_x86_debug_state32 > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( __darwin_x86_debug_state32 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_x86_debug_state32 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __darwin_x86_debug_state32 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_debug_state32 > ( ) ) ) . __dr0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_debug_state32 > ( ) ) ) . __dr1 as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_debug_state32 > ( ) ) ) . __dr2 as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_debug_state32 > ( ) ) ) . __dr3 as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_debug_state32 > ( ) ) ) . __dr4 as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_debug_state32 > ( ) ) ) . __dr5 as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_debug_state32 > ( ) ) ) . __dr6 as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_debug_state32 > ( ) ) ) . __dr7 as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr7 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __darwin_x86_thread_state64 { pub __rax : __uint64_t , pub __rbx : __uint64_t , pub __rcx : __uint64_t , pub __rdx : __uint64_t , pub __rdi : __uint64_t , pub __rsi : __uint64_t , pub __rbp : __uint64_t , pub __rsp : __uint64_t , pub __r8 : __uint64_t , pub __r9 : __uint64_t , pub __r10 : __uint64_t , pub __r11 : __uint64_t , pub __r12 : __uint64_t , pub __r13 : __uint64_t , pub __r14 : __uint64_t , pub __r15 : __uint64_t , pub __rip : __uint64_t , pub __rflags : __uint64_t , pub __cs : __uint64_t , pub __fs : __uint64_t , pub __gs : __uint64_t , } # [ test ] fn bindgen_test_layout___darwin_x86_thread_state64 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_x86_thread_state64 > ( ) , 168usize , concat ! ( "Size of: " , stringify ! ( __darwin_x86_thread_state64 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_x86_thread_state64 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __darwin_x86_thread_state64 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_thread_state64 > ( ) ) ) . __rax as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rax ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_thread_state64 > ( ) ) ) . __rbx as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rbx ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_thread_state64 > ( ) ) ) . __rcx as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rcx ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_thread_state64 > ( ) ) ) . __rdx as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rdx ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_thread_state64 > ( ) ) ) . __rdi as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rdi ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_thread_state64 > ( ) ) ) . __rsi as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rsi ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_thread_state64 > ( ) ) ) . __rbp as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rbp ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_thread_state64 > ( ) ) ) . __rsp as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rsp ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_thread_state64 > ( ) ) ) . __r8 as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_thread_state64 > ( ) ) ) . __r9 as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r9 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_thread_state64 > ( ) ) ) . __r10 as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r10 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_thread_state64 > ( ) ) ) . __r11 as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r11 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_thread_state64 > ( ) ) ) . __r12 as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r12 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_thread_state64 > ( ) ) ) . __r13 as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r13 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_thread_state64 > ( ) ) ) . __r14 as * const _ as usize } , 112usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r14 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_thread_state64 > ( ) ) ) . __r15 as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r15 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_thread_state64 > ( ) ) ) . __rip as * const _ as usize } , 128usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rip ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_thread_state64 > ( ) ) ) . __rflags as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rflags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_thread_state64 > ( ) ) ) . __cs as * const _ as usize } , 144usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_thread_state64 ) , "::" , stringify ! ( __cs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_thread_state64 > ( ) ) ) . __fs as * const _ as usize } , 152usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_thread_state64 ) , "::" , stringify ! ( __fs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_thread_state64 > ( ) ) ) . __gs as * const _ as usize } , 160usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_thread_state64 ) , "::" , stringify ! ( __gs ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __darwin_x86_float_state64 { pub __fpu_reserved : [ :: std :: os :: raw :: c_int ; 2usize ] , pub __fpu_fcw : __darwin_fp_control , pub __fpu_fsw : __darwin_fp_status , pub __fpu_ftw : __uint8_t , pub __fpu_rsrv1 : __uint8_t , pub __fpu_fop : __uint16_t , pub __fpu_ip : __uint32_t , pub __fpu_cs : __uint16_t , pub __fpu_rsrv2 : __uint16_t , pub __fpu_dp : __uint32_t , pub __fpu_ds : __uint16_t , pub __fpu_rsrv3 : __uint16_t , pub __fpu_mxcsr : __uint32_t , pub __fpu_mxcsrmask : __uint32_t , pub __fpu_stmm0 : __darwin_mmst_reg , pub __fpu_stmm1 : __darwin_mmst_reg , pub __fpu_stmm2 : __darwin_mmst_reg , pub __fpu_stmm3 : __darwin_mmst_reg , pub __fpu_stmm4 : __darwin_mmst_reg , pub __fpu_stmm5 : __darwin_mmst_reg , pub __fpu_stmm6 : __darwin_mmst_reg , pub __fpu_stmm7 : __darwin_mmst_reg , pub __fpu_xmm0 : __darwin_xmm_reg , pub __fpu_xmm1 : __darwin_xmm_reg , pub __fpu_xmm2 : __darwin_xmm_reg , pub __fpu_xmm3 : __darwin_xmm_reg , pub __fpu_xmm4 : __darwin_xmm_reg , pub __fpu_xmm5 : __darwin_xmm_reg , pub __fpu_xmm6 : __darwin_xmm_reg , pub __fpu_xmm7 : __darwin_xmm_reg , pub __fpu_xmm8 : __darwin_xmm_reg , pub __fpu_xmm9 : __darwin_xmm_reg , pub __fpu_xmm10 : __darwin_xmm_reg , pub __fpu_xmm11 : __darwin_xmm_reg , pub __fpu_xmm12 : __darwin_xmm_reg , pub __fpu_xmm13 : __darwin_xmm_reg , pub __fpu_xmm14 : __darwin_xmm_reg , pub __fpu_xmm15 : __darwin_xmm_reg , pub __fpu_rsrv4 : [ :: std :: os :: raw :: c_char ; 96usize ] , pub __fpu_reserved1 : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout___darwin_x86_float_state64 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_x86_float_state64 > ( ) , 524usize , concat ! ( "Size of: " , stringify ! ( __darwin_x86_float_state64 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_x86_float_state64 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __darwin_x86_float_state64 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_reserved as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_reserved ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_fcw as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_fcw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_fsw as * const _ as usize } , 10usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_fsw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_ftw as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_ftw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_rsrv1 as * const _ as usize } , 13usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_rsrv1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_fop as * const _ as usize } , 14usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_fop ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_ip as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_ip ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_cs as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_cs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_rsrv2 as * const _ as usize } , 22usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_rsrv2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_dp as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_dp ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_ds as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_ds ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_rsrv3 as * const _ as usize } , 30usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_rsrv3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_mxcsr as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_mxcsr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_mxcsrmask as * const _ as usize } , 36usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_mxcsrmask ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_stmm0 as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_stmm0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_stmm1 as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_stmm1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_stmm2 as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_stmm2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_stmm3 as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_stmm3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_stmm4 as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_stmm4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_stmm5 as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_stmm5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_stmm6 as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_stmm6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_stmm7 as * const _ as usize } , 152usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_stmm7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_xmm0 as * const _ as usize } , 168usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_xmm1 as * const _ as usize } , 184usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_xmm2 as * const _ as usize } , 200usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_xmm3 as * const _ as usize } , 216usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_xmm4 as * const _ as usize } , 232usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_xmm5 as * const _ as usize } , 248usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_xmm6 as * const _ as usize } , 264usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_xmm7 as * const _ as usize } , 280usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_xmm8 as * const _ as usize } , 296usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_xmm9 as * const _ as usize } , 312usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm9 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_xmm10 as * const _ as usize } , 328usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm10 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_xmm11 as * const _ as usize } , 344usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm11 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_xmm12 as * const _ as usize } , 360usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm12 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_xmm13 as * const _ as usize } , 376usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm13 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_xmm14 as * const _ as usize } , 392usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm14 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_xmm15 as * const _ as usize } , 408usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm15 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_rsrv4 as * const _ as usize } , 424usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_rsrv4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_float_state64 > ( ) ) ) . __fpu_reserved1 as * const _ as usize } , 520usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_reserved1 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __darwin_x86_avx_state64 { pub __fpu_reserved : [ :: std :: os :: raw :: c_int ; 2usize ] , pub __fpu_fcw : __darwin_fp_control , pub __fpu_fsw : __darwin_fp_status , pub __fpu_ftw : __uint8_t , pub __fpu_rsrv1 : __uint8_t , pub __fpu_fop : __uint16_t , pub __fpu_ip : __uint32_t , pub __fpu_cs : __uint16_t , pub __fpu_rsrv2 : __uint16_t , pub __fpu_dp : __uint32_t , pub __fpu_ds : __uint16_t , pub __fpu_rsrv3 : __uint16_t , pub __fpu_mxcsr : __uint32_t , pub __fpu_mxcsrmask : __uint32_t , pub __fpu_stmm0 : __darwin_mmst_reg , pub __fpu_stmm1 : __darwin_mmst_reg , pub __fpu_stmm2 : __darwin_mmst_reg , pub __fpu_stmm3 : __darwin_mmst_reg , pub __fpu_stmm4 : __darwin_mmst_reg , pub __fpu_stmm5 : __darwin_mmst_reg , pub __fpu_stmm6 : __darwin_mmst_reg , pub __fpu_stmm7 : __darwin_mmst_reg , pub __fpu_xmm0 : __darwin_xmm_reg , pub __fpu_xmm1 : __darwin_xmm_reg , pub __fpu_xmm2 : __darwin_xmm_reg , pub __fpu_xmm3 : __darwin_xmm_reg , pub __fpu_xmm4 : __darwin_xmm_reg , pub __fpu_xmm5 : __darwin_xmm_reg , pub __fpu_xmm6 : __darwin_xmm_reg , pub __fpu_xmm7 : __darwin_xmm_reg , pub __fpu_xmm8 : __darwin_xmm_reg , pub __fpu_xmm9 : __darwin_xmm_reg , pub __fpu_xmm10 : __darwin_xmm_reg , pub __fpu_xmm11 : __darwin_xmm_reg , pub __fpu_xmm12 : __darwin_xmm_reg , pub __fpu_xmm13 : __darwin_xmm_reg , pub __fpu_xmm14 : __darwin_xmm_reg , pub __fpu_xmm15 : __darwin_xmm_reg , pub __fpu_rsrv4 : [ :: std :: os :: raw :: c_char ; 96usize ] , pub __fpu_reserved1 : :: std :: os :: raw :: c_int , pub __avx_reserved1 : [ :: std :: os :: raw :: c_char ; 64usize ] , pub __fpu_ymmh0 : __darwin_xmm_reg , pub __fpu_ymmh1 : __darwin_xmm_reg , pub __fpu_ymmh2 : __darwin_xmm_reg , pub __fpu_ymmh3 : __darwin_xmm_reg , pub __fpu_ymmh4 : __darwin_xmm_reg , pub __fpu_ymmh5 : __darwin_xmm_reg , pub __fpu_ymmh6 : __darwin_xmm_reg , pub __fpu_ymmh7 : __darwin_xmm_reg , pub __fpu_ymmh8 : __darwin_xmm_reg , pub __fpu_ymmh9 : __darwin_xmm_reg , pub __fpu_ymmh10 : __darwin_xmm_reg , pub __fpu_ymmh11 : __darwin_xmm_reg , pub __fpu_ymmh12 : __darwin_xmm_reg , pub __fpu_ymmh13 : __darwin_xmm_reg , pub __fpu_ymmh14 : __darwin_xmm_reg , pub __fpu_ymmh15 : __darwin_xmm_reg , } # [ test ] fn bindgen_test_layout___darwin_x86_avx_state64 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_x86_avx_state64 > ( ) , 844usize , concat ! ( "Size of: " , stringify ! ( __darwin_x86_avx_state64 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_x86_avx_state64 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __darwin_x86_avx_state64 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_reserved as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_reserved ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_fcw as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_fcw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_fsw as * const _ as usize } , 10usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_fsw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_ftw as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ftw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_rsrv1 as * const _ as usize } , 13usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_rsrv1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_fop as * const _ as usize } , 14usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_fop ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_ip as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ip ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_cs as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_cs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_rsrv2 as * const _ as usize } , 22usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_rsrv2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_dp as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_dp ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_ds as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ds ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_rsrv3 as * const _ as usize } , 30usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_rsrv3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_mxcsr as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_mxcsr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_mxcsrmask as * const _ as usize } , 36usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_mxcsrmask ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_stmm0 as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_stmm1 as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_stmm2 as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_stmm3 as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_stmm4 as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_stmm5 as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_stmm6 as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_stmm7 as * const _ as usize } , 152usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_xmm0 as * const _ as usize } , 168usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_xmm1 as * const _ as usize } , 184usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_xmm2 as * const _ as usize } , 200usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_xmm3 as * const _ as usize } , 216usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_xmm4 as * const _ as usize } , 232usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_xmm5 as * const _ as usize } , 248usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_xmm6 as * const _ as usize } , 264usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_xmm7 as * const _ as usize } , 280usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_xmm8 as * const _ as usize } , 296usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_xmm9 as * const _ as usize } , 312usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm9 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_xmm10 as * const _ as usize } , 328usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm10 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_xmm11 as * const _ as usize } , 344usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm11 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_xmm12 as * const _ as usize } , 360usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm12 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_xmm13 as * const _ as usize } , 376usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm13 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_xmm14 as * const _ as usize } , 392usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm14 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_xmm15 as * const _ as usize } , 408usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm15 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_rsrv4 as * const _ as usize } , 424usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_rsrv4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_reserved1 as * const _ as usize } , 520usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_reserved1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __avx_reserved1 as * const _ as usize } , 524usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __avx_reserved1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_ymmh0 as * const _ as usize } , 588usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_ymmh1 as * const _ as usize } , 604usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_ymmh2 as * const _ as usize } , 620usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_ymmh3 as * const _ as usize } , 636usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_ymmh4 as * const _ as usize } , 652usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_ymmh5 as * const _ as usize } , 668usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_ymmh6 as * const _ as usize } , 684usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_ymmh7 as * const _ as usize } , 700usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_ymmh8 as * const _ as usize } , 716usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_ymmh9 as * const _ as usize } , 732usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh9 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_ymmh10 as * const _ as usize } , 748usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh10 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_ymmh11 as * const _ as usize } , 764usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh11 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_ymmh12 as * const _ as usize } , 780usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh12 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_ymmh13 as * const _ as usize } , 796usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh13 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_ymmh14 as * const _ as usize } , 812usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh14 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx_state64 > ( ) ) ) . __fpu_ymmh15 as * const _ as usize } , 828usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh15 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __darwin_x86_avx512_state64 { pub __fpu_reserved : [ :: std :: os :: raw :: c_int ; 2usize ] , pub __fpu_fcw : __darwin_fp_control , pub __fpu_fsw : __darwin_fp_status , pub __fpu_ftw : __uint8_t , pub __fpu_rsrv1 : __uint8_t , pub __fpu_fop : __uint16_t , pub __fpu_ip : __uint32_t , pub __fpu_cs : __uint16_t , pub __fpu_rsrv2 : __uint16_t , pub __fpu_dp : __uint32_t , pub __fpu_ds : __uint16_t , pub __fpu_rsrv3 : __uint16_t , pub __fpu_mxcsr : __uint32_t , pub __fpu_mxcsrmask : __uint32_t , pub __fpu_stmm0 : __darwin_mmst_reg , pub __fpu_stmm1 : __darwin_mmst_reg , pub __fpu_stmm2 : __darwin_mmst_reg , pub __fpu_stmm3 : __darwin_mmst_reg , pub __fpu_stmm4 : __darwin_mmst_reg , pub __fpu_stmm5 : __darwin_mmst_reg , pub __fpu_stmm6 : __darwin_mmst_reg , pub __fpu_stmm7 : __darwin_mmst_reg , pub __fpu_xmm0 : __darwin_xmm_reg , pub __fpu_xmm1 : __darwin_xmm_reg , pub __fpu_xmm2 : __darwin_xmm_reg , pub __fpu_xmm3 : __darwin_xmm_reg , pub __fpu_xmm4 : __darwin_xmm_reg , pub __fpu_xmm5 : __darwin_xmm_reg , pub __fpu_xmm6 : __darwin_xmm_reg , pub __fpu_xmm7 : __darwin_xmm_reg , pub __fpu_xmm8 : __darwin_xmm_reg , pub __fpu_xmm9 : __darwin_xmm_reg , pub __fpu_xmm10 : __darwin_xmm_reg , pub __fpu_xmm11 : __darwin_xmm_reg , pub __fpu_xmm12 : __darwin_xmm_reg , pub __fpu_xmm13 : __darwin_xmm_reg , pub __fpu_xmm14 : __darwin_xmm_reg , pub __fpu_xmm15 : __darwin_xmm_reg , pub __fpu_rsrv4 : [ :: std :: os :: raw :: c_char ; 96usize ] , pub __fpu_reserved1 : :: std :: os :: raw :: c_int , pub __avx_reserved1 : [ :: std :: os :: raw :: c_char ; 64usize ] , pub __fpu_ymmh0 : __darwin_xmm_reg , pub __fpu_ymmh1 : __darwin_xmm_reg , pub __fpu_ymmh2 : __darwin_xmm_reg , pub __fpu_ymmh3 : __darwin_xmm_reg , pub __fpu_ymmh4 : __darwin_xmm_reg , pub __fpu_ymmh5 : __darwin_xmm_reg , pub __fpu_ymmh6 : __darwin_xmm_reg , pub __fpu_ymmh7 : __darwin_xmm_reg , pub __fpu_ymmh8 : __darwin_xmm_reg , pub __fpu_ymmh9 : __darwin_xmm_reg , pub __fpu_ymmh10 : __darwin_xmm_reg , pub __fpu_ymmh11 : __darwin_xmm_reg , pub __fpu_ymmh12 : __darwin_xmm_reg , pub __fpu_ymmh13 : __darwin_xmm_reg , pub __fpu_ymmh14 : __darwin_xmm_reg , pub __fpu_ymmh15 : __darwin_xmm_reg , pub __fpu_k0 : __darwin_opmask_reg , pub __fpu_k1 : __darwin_opmask_reg , pub __fpu_k2 : __darwin_opmask_reg , pub __fpu_k3 : __darwin_opmask_reg , pub __fpu_k4 : __darwin_opmask_reg , pub __fpu_k5 : __darwin_opmask_reg , pub __fpu_k6 : __darwin_opmask_reg , pub __fpu_k7 : __darwin_opmask_reg , pub __fpu_zmmh0 : __darwin_ymm_reg , pub __fpu_zmmh1 : __darwin_ymm_reg , pub __fpu_zmmh2 : __darwin_ymm_reg , pub __fpu_zmmh3 : __darwin_ymm_reg , pub __fpu_zmmh4 : __darwin_ymm_reg , pub __fpu_zmmh5 : __darwin_ymm_reg , pub __fpu_zmmh6 : __darwin_ymm_reg , pub __fpu_zmmh7 : __darwin_ymm_reg , pub __fpu_zmmh8 : __darwin_ymm_reg , pub __fpu_zmmh9 : __darwin_ymm_reg , pub __fpu_zmmh10 : __darwin_ymm_reg , pub __fpu_zmmh11 : __darwin_ymm_reg , pub __fpu_zmmh12 : __darwin_ymm_reg , pub __fpu_zmmh13 : __darwin_ymm_reg , pub __fpu_zmmh14 : __darwin_ymm_reg , pub __fpu_zmmh15 : __darwin_ymm_reg , pub __fpu_zmm16 : __darwin_zmm_reg , pub __fpu_zmm17 : __darwin_zmm_reg , pub __fpu_zmm18 : __darwin_zmm_reg , pub __fpu_zmm19 : __darwin_zmm_reg , pub __fpu_zmm20 : __darwin_zmm_reg , pub __fpu_zmm21 : __darwin_zmm_reg , pub __fpu_zmm22 : __darwin_zmm_reg , pub __fpu_zmm23 : __darwin_zmm_reg , pub __fpu_zmm24 : __darwin_zmm_reg , pub __fpu_zmm25 : __darwin_zmm_reg , pub __fpu_zmm26 : __darwin_zmm_reg , pub __fpu_zmm27 : __darwin_zmm_reg , pub __fpu_zmm28 : __darwin_zmm_reg , pub __fpu_zmm29 : __darwin_zmm_reg , pub __fpu_zmm30 : __darwin_zmm_reg , pub __fpu_zmm31 : __darwin_zmm_reg , } # [ test ] fn bindgen_test_layout___darwin_x86_avx512_state64 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_x86_avx512_state64 > ( ) , 2444usize , concat ! ( "Size of: " , stringify ! ( __darwin_x86_avx512_state64 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_x86_avx512_state64 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __darwin_x86_avx512_state64 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_reserved as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_reserved ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_fcw as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_fcw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_fsw as * const _ as usize } , 10usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_fsw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_ftw as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_ftw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_rsrv1 as * const _ as usize } , 13usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_rsrv1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_fop as * const _ as usize } , 14usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_fop ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_ip as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_ip ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_cs as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_cs ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_rsrv2 as * const _ as usize } , 22usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_rsrv2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_dp as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_dp ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_ds as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_ds ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_rsrv3 as * const _ as usize } , 30usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_rsrv3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_mxcsr as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_mxcsr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_mxcsrmask as * const _ as usize } , 36usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_mxcsrmask ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_stmm0 as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_stmm0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_stmm1 as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_stmm1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_stmm2 as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_stmm2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_stmm3 as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_stmm3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_stmm4 as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_stmm4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_stmm5 as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_stmm5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_stmm6 as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_stmm6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_stmm7 as * const _ as usize } , 152usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_stmm7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_xmm0 as * const _ as usize } , 168usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_xmm0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_xmm1 as * const _ as usize } , 184usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_xmm1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_xmm2 as * const _ as usize } , 200usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_xmm2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_xmm3 as * const _ as usize } , 216usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_xmm3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_xmm4 as * const _ as usize } , 232usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_xmm4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_xmm5 as * const _ as usize } , 248usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_xmm5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_xmm6 as * const _ as usize } , 264usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_xmm6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_xmm7 as * const _ as usize } , 280usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_xmm7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_xmm8 as * const _ as usize } , 296usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_xmm8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_xmm9 as * const _ as usize } , 312usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_xmm9 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_xmm10 as * const _ as usize } , 328usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_xmm10 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_xmm11 as * const _ as usize } , 344usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_xmm11 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_xmm12 as * const _ as usize } , 360usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_xmm12 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_xmm13 as * const _ as usize } , 376usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_xmm13 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_xmm14 as * const _ as usize } , 392usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_xmm14 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_xmm15 as * const _ as usize } , 408usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_xmm15 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_rsrv4 as * const _ as usize } , 424usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_rsrv4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_reserved1 as * const _ as usize } , 520usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_reserved1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __avx_reserved1 as * const _ as usize } , 524usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __avx_reserved1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_ymmh0 as * const _ as usize } , 588usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_ymmh0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_ymmh1 as * const _ as usize } , 604usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_ymmh1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_ymmh2 as * const _ as usize } , 620usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_ymmh2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_ymmh3 as * const _ as usize } , 636usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_ymmh3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_ymmh4 as * const _ as usize } , 652usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_ymmh4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_ymmh5 as * const _ as usize } , 668usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_ymmh5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_ymmh6 as * const _ as usize } , 684usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_ymmh6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_ymmh7 as * const _ as usize } , 700usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_ymmh7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_ymmh8 as * const _ as usize } , 716usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_ymmh8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_ymmh9 as * const _ as usize } , 732usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_ymmh9 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_ymmh10 as * const _ as usize } , 748usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_ymmh10 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_ymmh11 as * const _ as usize } , 764usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_ymmh11 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_ymmh12 as * const _ as usize } , 780usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_ymmh12 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_ymmh13 as * const _ as usize } , 796usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_ymmh13 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_ymmh14 as * const _ as usize } , 812usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_ymmh14 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_ymmh15 as * const _ as usize } , 828usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_ymmh15 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_k0 as * const _ as usize } , 844usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_k0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_k1 as * const _ as usize } , 852usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_k1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_k2 as * const _ as usize } , 860usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_k2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_k3 as * const _ as usize } , 868usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_k3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_k4 as * const _ as usize } , 876usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_k4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_k5 as * const _ as usize } , 884usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_k5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_k6 as * const _ as usize } , 892usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_k6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_k7 as * const _ as usize } , 900usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_k7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmmh0 as * const _ as usize } , 908usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmmh0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmmh1 as * const _ as usize } , 940usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmmh1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmmh2 as * const _ as usize } , 972usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmmh2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmmh3 as * const _ as usize } , 1004usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmmh3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmmh4 as * const _ as usize } , 1036usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmmh4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmmh5 as * const _ as usize } , 1068usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmmh5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmmh6 as * const _ as usize } , 1100usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmmh6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmmh7 as * const _ as usize } , 1132usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmmh7 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmmh8 as * const _ as usize } , 1164usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmmh8 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmmh9 as * const _ as usize } , 1196usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmmh9 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmmh10 as * const _ as usize } , 1228usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmmh10 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmmh11 as * const _ as usize } , 1260usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmmh11 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmmh12 as * const _ as usize } , 1292usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmmh12 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmmh13 as * const _ as usize } , 1324usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmmh13 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmmh14 as * const _ as usize } , 1356usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmmh14 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmmh15 as * const _ as usize } , 1388usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmmh15 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmm16 as * const _ as usize } , 1420usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmm16 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmm17 as * const _ as usize } , 1484usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmm17 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmm18 as * const _ as usize } , 1548usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmm18 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmm19 as * const _ as usize } , 1612usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmm19 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmm20 as * const _ as usize } , 1676usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmm20 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmm21 as * const _ as usize } , 1740usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmm21 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmm22 as * const _ as usize } , 1804usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmm22 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmm23 as * const _ as usize } , 1868usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmm23 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmm24 as * const _ as usize } , 1932usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmm24 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmm25 as * const _ as usize } , 1996usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmm25 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmm26 as * const _ as usize } , 2060usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmm26 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmm27 as * const _ as usize } , 2124usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmm27 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmm28 as * const _ as usize } , 2188usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmm28 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmm29 as * const _ as usize } , 2252usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmm29 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmm30 as * const _ as usize } , 2316usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmm30 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_avx512_state64 > ( ) ) ) . __fpu_zmm31 as * const _ as usize } , 2380usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_avx512_state64 ) , "::" , stringify ! ( __fpu_zmm31 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __darwin_x86_exception_state64 { pub __trapno : __uint16_t , pub __cpu : __uint16_t , pub __err : __uint32_t , pub __faultvaddr : __uint64_t , } # [ test ] fn bindgen_test_layout___darwin_x86_exception_state64 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_x86_exception_state64 > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( __darwin_x86_exception_state64 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_x86_exception_state64 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __darwin_x86_exception_state64 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_exception_state64 > ( ) ) ) . __trapno as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_exception_state64 ) , "::" , stringify ! ( __trapno ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_exception_state64 > ( ) ) ) . __cpu as * const _ as usize } , 2usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_exception_state64 ) , "::" , stringify ! ( __cpu ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_exception_state64 > ( ) ) ) . __err as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_exception_state64 ) , "::" , stringify ! ( __err ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_exception_state64 > ( ) ) ) . __faultvaddr as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_exception_state64 ) , "::" , stringify ! ( __faultvaddr ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __darwin_x86_debug_state64 { pub __dr0 : __uint64_t , pub __dr1 : __uint64_t , pub __dr2 : __uint64_t , pub __dr3 : __uint64_t , pub __dr4 : __uint64_t , pub __dr5 : __uint64_t , pub __dr6 : __uint64_t , pub __dr7 : __uint64_t , } # [ test ] fn bindgen_test_layout___darwin_x86_debug_state64 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_x86_debug_state64 > ( ) , 64usize , concat ! ( "Size of: " , stringify ! ( __darwin_x86_debug_state64 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_x86_debug_state64 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __darwin_x86_debug_state64 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_debug_state64 > ( ) ) ) . __dr0 as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_debug_state64 > ( ) ) ) . __dr1 as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_debug_state64 > ( ) ) ) . __dr2 as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_debug_state64 > ( ) ) ) . __dr3 as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_debug_state64 > ( ) ) ) . __dr4 as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_debug_state64 > ( ) ) ) . __dr5 as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr5 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_debug_state64 > ( ) ) ) . __dr6 as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr6 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_debug_state64 > ( ) ) ) . __dr7 as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr7 ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __darwin_x86_cpmu_state64 { pub __ctrs : [ __uint64_t ; 16usize ] , } # [ test ] fn bindgen_test_layout___darwin_x86_cpmu_state64 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_x86_cpmu_state64 > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( __darwin_x86_cpmu_state64 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_x86_cpmu_state64 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __darwin_x86_cpmu_state64 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_x86_cpmu_state64 > ( ) ) ) . __ctrs as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_x86_cpmu_state64 ) , "::" , stringify ! ( __ctrs ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __darwin_mcontext32 { pub __es : __darwin_i386_exception_state , pub __ss : __darwin_i386_thread_state , pub __fs : __darwin_i386_float_state , } # [ test ] fn bindgen_test_layout___darwin_mcontext32 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_mcontext32 > ( ) , 600usize , concat ! ( "Size of: " , stringify ! ( __darwin_mcontext32 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_mcontext32 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __darwin_mcontext32 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_mcontext32 > ( ) ) ) . __es as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_mcontext32 ) , "::" , stringify ! ( __es ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_mcontext32 > ( ) ) ) . __ss as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_mcontext32 ) , "::" , stringify ! ( __ss ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_mcontext32 > ( ) ) ) . __fs as * const _ as usize } , 76usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_mcontext32 ) , "::" , stringify ! ( __fs ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __darwin_mcontext_avx32 { pub __es : __darwin_i386_exception_state , pub __ss : __darwin_i386_thread_state , pub __fs : __darwin_i386_avx_state , } # [ test ] fn bindgen_test_layout___darwin_mcontext_avx32 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_mcontext_avx32 > ( ) , 792usize , concat ! ( "Size of: " , stringify ! ( __darwin_mcontext_avx32 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_mcontext_avx32 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __darwin_mcontext_avx32 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_mcontext_avx32 > ( ) ) ) . __es as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_mcontext_avx32 ) , "::" , stringify ! ( __es ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_mcontext_avx32 > ( ) ) ) . __ss as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_mcontext_avx32 ) , "::" , stringify ! ( __ss ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_mcontext_avx32 > ( ) ) ) . __fs as * const _ as usize } , 76usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_mcontext_avx32 ) , "::" , stringify ! ( __fs ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __darwin_mcontext_avx512_32 { pub __es : __darwin_i386_exception_state , pub __ss : __darwin_i386_thread_state , pub __fs : __darwin_i386_avx512_state , } # [ test ] fn bindgen_test_layout___darwin_mcontext_avx512_32 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_mcontext_avx512_32 > ( ) , 1112usize , concat ! ( "Size of: " , stringify ! ( __darwin_mcontext_avx512_32 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_mcontext_avx512_32 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( __darwin_mcontext_avx512_32 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_mcontext_avx512_32 > ( ) ) ) . __es as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_mcontext_avx512_32 ) , "::" , stringify ! ( __es ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_mcontext_avx512_32 > ( ) ) ) . __ss as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_mcontext_avx512_32 ) , "::" , stringify ! ( __ss ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_mcontext_avx512_32 > ( ) ) ) . __fs as * const _ as usize } , 76usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_mcontext_avx512_32 ) , "::" , stringify ! ( __fs ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __darwin_mcontext64 { pub __es : __darwin_x86_exception_state64 , pub __ss : __darwin_x86_thread_state64 , pub __fs : __darwin_x86_float_state64 , } # [ test ] fn bindgen_test_layout___darwin_mcontext64 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_mcontext64 > ( ) , 712usize , concat ! ( "Size of: " , stringify ! ( __darwin_mcontext64 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_mcontext64 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __darwin_mcontext64 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_mcontext64 > ( ) ) ) . __es as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_mcontext64 ) , "::" , stringify ! ( __es ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_mcontext64 > ( ) ) ) . __ss as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_mcontext64 ) , "::" , stringify ! ( __ss ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_mcontext64 > ( ) ) ) . __fs as * const _ as usize } , 184usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_mcontext64 ) , "::" , stringify ! ( __fs ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __darwin_mcontext_avx64 { pub __es : __darwin_x86_exception_state64 , pub __ss : __darwin_x86_thread_state64 , pub __fs : __darwin_x86_avx_state64 , } # [ test ] fn bindgen_test_layout___darwin_mcontext_avx64 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_mcontext_avx64 > ( ) , 1032usize , concat ! ( "Size of: " , stringify ! ( __darwin_mcontext_avx64 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_mcontext_avx64 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __darwin_mcontext_avx64 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_mcontext_avx64 > ( ) ) ) . __es as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_mcontext_avx64 ) , "::" , stringify ! ( __es ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_mcontext_avx64 > ( ) ) ) . __ss as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_mcontext_avx64 ) , "::" , stringify ! ( __ss ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_mcontext_avx64 > ( ) ) ) . __fs as * const _ as usize } , 184usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_mcontext_avx64 ) , "::" , stringify ! ( __fs ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __darwin_mcontext_avx512_64 { pub __es : __darwin_x86_exception_state64 , pub __ss : __darwin_x86_thread_state64 , pub __fs : __darwin_x86_avx512_state64 , } # [ test ] fn bindgen_test_layout___darwin_mcontext_avx512_64 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_mcontext_avx512_64 > ( ) , 2632usize , concat ! ( "Size of: " , stringify ! ( __darwin_mcontext_avx512_64 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_mcontext_avx512_64 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __darwin_mcontext_avx512_64 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_mcontext_avx512_64 > ( ) ) ) . __es as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_mcontext_avx512_64 ) , "::" , stringify ! ( __es ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_mcontext_avx512_64 > ( ) ) ) . __ss as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_mcontext_avx512_64 ) , "::" , stringify ! ( __ss ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_mcontext_avx512_64 > ( ) ) ) . __fs as * const _ as usize } , 184usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_mcontext_avx512_64 ) , "::" , stringify ! ( __fs ) ) ) ; } pub type mcontext_t = * mut __darwin_mcontext64 ; pub type pthread_attr_t = __darwin_pthread_attr_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __darwin_sigaltstack { pub ss_sp : * mut :: std :: os :: raw :: c_void , pub ss_size : __darwin_size_t , pub ss_flags : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout___darwin_sigaltstack ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_sigaltstack > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( __darwin_sigaltstack ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_sigaltstack > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __darwin_sigaltstack ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_sigaltstack > ( ) ) ) . ss_sp as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_sigaltstack ) , "::" , stringify ! ( ss_sp ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_sigaltstack > ( ) ) ) . ss_size as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_sigaltstack ) , "::" , stringify ! ( ss_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_sigaltstack > ( ) ) ) . ss_flags as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_sigaltstack ) , "::" , stringify ! ( ss_flags ) ) ) ; } pub type stack_t = __darwin_sigaltstack ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __darwin_ucontext { pub uc_onstack : :: std :: os :: raw :: c_int , pub uc_sigmask : __darwin_sigset_t , pub uc_stack : __darwin_sigaltstack , pub uc_link : * mut __darwin_ucontext , pub uc_mcsize : __darwin_size_t , pub uc_mcontext : * mut __darwin_mcontext64 , } # [ test ] fn bindgen_test_layout___darwin_ucontext ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __darwin_ucontext > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( __darwin_ucontext ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __darwin_ucontext > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __darwin_ucontext ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_ucontext > ( ) ) ) . uc_onstack as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_ucontext ) , "::" , stringify ! ( uc_onstack ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_ucontext > ( ) ) ) . uc_sigmask as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_ucontext ) , "::" , stringify ! ( uc_sigmask ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_ucontext > ( ) ) ) . uc_stack as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_ucontext ) , "::" , stringify ! ( uc_stack ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_ucontext > ( ) ) ) . uc_link as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_ucontext ) , "::" , stringify ! ( uc_link ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_ucontext > ( ) ) ) . uc_mcsize as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_ucontext ) , "::" , stringify ! ( uc_mcsize ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __darwin_ucontext > ( ) ) ) . uc_mcontext as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( __darwin_ucontext ) , "::" , stringify ! ( uc_mcontext ) ) ) ; } pub type ucontext_t = __darwin_ucontext ; pub type sigset_t = __darwin_sigset_t ; pub type uid_t = __darwin_uid_t ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union sigval { pub sival_int : :: std :: os :: raw :: c_int , pub sival_ptr : * mut :: std :: os :: raw :: c_void , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout_sigval ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigval > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( sigval ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigval > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigval ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigval > ( ) ) ) . sival_int as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( sigval ) , "::" , stringify ! ( sival_int ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigval > ( ) ) ) . sival_ptr as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( sigval ) , "::" , stringify ! ( sival_ptr ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct sigevent { pub sigev_notify : :: std :: os :: raw :: c_int , pub sigev_signo : :: std :: os :: raw :: c_int , pub sigev_value : sigval , pub sigev_notify_function : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : sigval ) > , pub sigev_notify_attributes : * mut pthread_attr_t , } # [ test ] fn bindgen_test_layout_sigevent ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigevent > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( sigevent ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigevent > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigevent ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigevent > ( ) ) ) . sigev_notify as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( sigevent ) , "::" , stringify ! ( sigev_notify ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigevent > ( ) ) ) . sigev_signo as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( sigevent ) , "::" , stringify ! ( sigev_signo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigevent > ( ) ) ) . sigev_value as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( sigevent ) , "::" , stringify ! ( sigev_value ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigevent > ( ) ) ) . sigev_notify_function as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( sigevent ) , "::" , stringify ! ( sigev_notify_function ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigevent > ( ) ) ) . sigev_notify_attributes as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( sigevent ) , "::" , stringify ! ( sigev_notify_attributes ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __siginfo { pub si_signo : :: std :: os :: raw :: c_int , pub si_errno : :: std :: os :: raw :: c_int , pub si_code : :: std :: os :: raw :: c_int , pub si_pid : pid_t , pub si_uid : uid_t , pub si_status : :: std :: os :: raw :: c_int , pub si_addr : * mut :: std :: os :: raw :: c_void , pub si_value : sigval , pub si_band : :: std :: os :: raw :: c_long , pub __pad : [ :: std :: os :: raw :: c_ulong ; 7usize ] , } # [ test ] fn bindgen_test_layout___siginfo ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __siginfo > ( ) , 104usize , concat ! ( "Size of: " , stringify ! ( __siginfo ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __siginfo > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __siginfo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __siginfo > ( ) ) ) . si_signo as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __siginfo ) , "::" , stringify ! ( si_signo ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __siginfo > ( ) ) ) . si_errno as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( __siginfo ) , "::" , stringify ! ( si_errno ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __siginfo > ( ) ) ) . si_code as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __siginfo ) , "::" , stringify ! ( si_code ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __siginfo > ( ) ) ) . si_pid as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( __siginfo ) , "::" , stringify ! ( si_pid ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __siginfo > ( ) ) ) . si_uid as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __siginfo ) , "::" , stringify ! ( si_uid ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __siginfo > ( ) ) ) . si_status as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( __siginfo ) , "::" , stringify ! ( si_status ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __siginfo > ( ) ) ) . si_addr as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( __siginfo ) , "::" , stringify ! ( si_addr ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __siginfo > ( ) ) ) . si_value as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( __siginfo ) , "::" , stringify ! ( si_value ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __siginfo > ( ) ) ) . si_band as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( __siginfo ) , "::" , stringify ! ( si_band ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __siginfo > ( ) ) ) . __pad as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( __siginfo ) , "::" , stringify ! ( __pad ) ) ) ; } pub type siginfo_t = __siginfo ; # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union __sigaction_u { pub __sa_handler : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : :: std :: os :: raw :: c_int ) > , pub __sa_sigaction : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut __siginfo , arg3 : * mut :: std :: os :: raw :: c_void ) > , _bindgen_union_align : u64 , } # [ test ] fn bindgen_test_layout___sigaction_u ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __sigaction_u > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( __sigaction_u ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __sigaction_u > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __sigaction_u ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sigaction_u > ( ) ) ) . __sa_handler as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __sigaction_u ) , "::" , stringify ! ( __sa_handler ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sigaction_u > ( ) ) ) . __sa_sigaction as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __sigaction_u ) , "::" , stringify ! ( __sa_sigaction ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct __sigaction { pub __sigaction_u : __sigaction_u , pub sa_tramp : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut siginfo_t , arg5 : * mut :: std :: os :: raw :: c_void ) > , pub sa_mask : sigset_t , pub sa_flags : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout___sigaction ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __sigaction > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( __sigaction ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __sigaction > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __sigaction ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sigaction > ( ) ) ) . __sigaction_u as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __sigaction ) , "::" , stringify ! ( __sigaction_u ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sigaction > ( ) ) ) . sa_tramp as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __sigaction ) , "::" , stringify ! ( sa_tramp ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sigaction > ( ) ) ) . sa_mask as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __sigaction ) , "::" , stringify ! ( sa_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __sigaction > ( ) ) ) . sa_flags as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( __sigaction ) , "::" , stringify ! ( sa_flags ) ) ) ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub struct sigaction { pub __sigaction_u : __sigaction_u , pub sa_mask : sigset_t , pub sa_flags : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_sigaction ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigaction > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( sigaction ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigaction > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigaction ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigaction > ( ) ) ) . __sigaction_u as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( sigaction ) , "::" , stringify ! ( __sigaction_u ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigaction > ( ) ) ) . sa_mask as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( sigaction ) , "::" , stringify ! ( sa_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigaction > ( ) ) ) . sa_flags as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( sigaction ) , "::" , stringify ! ( sa_flags ) ) ) ; } pub type sig_t = :: std :: option :: Option < unsafe extern "C" fn ( arg1 : :: std :: os :: raw :: c_int ) > ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct sigvec { pub sv_handler : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : :: std :: os :: raw :: c_int ) > , pub sv_mask : :: std :: os :: raw :: c_int , pub sv_flags : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_sigvec ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigvec > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( sigvec ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigvec > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigvec ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigvec > ( ) ) ) . sv_handler as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( sigvec ) , "::" , stringify ! ( sv_handler ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigvec > ( ) ) ) . sv_mask as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( sigvec ) , "::" , stringify ! ( sv_mask ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigvec > ( ) ) ) . sv_flags as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( sigvec ) , "::" , stringify ! ( sv_flags ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct sigstack { pub ss_sp : * mut :: std :: os :: raw :: c_char , pub ss_onstack : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_sigstack ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sigstack > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( sigstack ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sigstack > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( sigstack ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigstack > ( ) ) ) . ss_sp as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( sigstack ) , "::" , stringify ! ( ss_sp ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sigstack > ( ) ) ) . ss_onstack as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( sigstack ) , "::" , stringify ! ( ss_onstack ) ) ) ; } extern "C" { pub fn signal ( arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : :: std :: os :: raw :: c_int ) > ) -> :: std :: option :: Option < unsafe extern "C" fn ( arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : :: std :: os :: raw :: c_int ) > ) > ; } pub type int_least8_t = i8 ; pub type int_least16_t = i16 ; pub type int_least32_t = i32 ; pub type int_least64_t = i64 ; pub type uint_least8_t = u8 ; pub type uint_least16_t = u16 ; pub type uint_least32_t = u32 ; pub type uint_least64_t = u64 ; pub type int_fast8_t = i8 ; pub type int_fast16_t = i16 ; pub type int_fast32_t = i32 ; pub type int_fast64_t = i64 ; pub type uint_fast8_t = u8 ; pub type uint_fast16_t = u16 ; pub type uint_fast32_t = u32 ; pub type uint_fast64_t = u64 ; pub type intmax_t = :: std :: os :: raw :: c_long ; pub type uintmax_t = :: std :: os :: raw :: c_ulong ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct timeval { pub tv_sec : __darwin_time_t , pub tv_usec : __darwin_suseconds_t , } # [ test ] fn bindgen_test_layout_timeval ( ) { assert_eq ! ( :: std :: mem :: size_of :: < timeval > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( timeval ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < timeval > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( timeval ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < timeval > ( ) ) ) . tv_sec as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( timeval ) , "::" , stringify ! ( tv_sec ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < timeval > ( ) ) ) . tv_usec as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( timeval ) , "::" , stringify ! ( tv_usec ) ) ) ; } pub type rlim_t = __uint64_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct rusage { pub ru_utime : timeval , pub ru_stime : timeval , pub ru_maxrss : :: std :: os :: raw :: c_long , pub ru_ixrss : :: std :: os :: raw :: c_long , pub ru_idrss : :: std :: os :: raw :: c_long , pub ru_isrss : :: std :: os :: raw :: c_long , pub ru_minflt : :: std :: os :: raw :: c_long , pub ru_majflt : :: std :: os :: raw :: c_long , pub ru_nswap : :: std :: os :: raw :: c_long , pub ru_inblock : :: std :: os :: raw :: c_long , pub ru_oublock : :: std :: os :: raw :: c_long , pub ru_msgsnd : :: std :: os :: raw :: c_long , pub ru_msgrcv : :: std :: os :: raw :: c_long , pub ru_nsignals : :: std :: os :: raw :: c_long , pub ru_nvcsw : :: std :: os :: raw :: c_long , pub ru_nivcsw : :: std :: os :: raw :: c_long , } # [ test ] fn bindgen_test_layout_rusage ( ) { assert_eq ! ( :: std :: mem :: size_of :: < rusage > ( ) , 144usize , concat ! ( "Size of: " , stringify ! ( rusage ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < rusage > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( rusage ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage > ( ) ) ) . ru_utime as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( rusage ) , "::" , stringify ! ( ru_utime ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage > ( ) ) ) . ru_stime as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( rusage ) , "::" , stringify ! ( ru_stime ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage > ( ) ) ) . ru_maxrss as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( rusage ) , "::" , stringify ! ( ru_maxrss ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage > ( ) ) ) . ru_ixrss as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( rusage ) , "::" , stringify ! ( ru_ixrss ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage > ( ) ) ) . ru_idrss as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( rusage ) , "::" , stringify ! ( ru_idrss ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage > ( ) ) ) . ru_isrss as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( rusage ) , "::" , stringify ! ( ru_isrss ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage > ( ) ) ) . ru_minflt as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( rusage ) , "::" , stringify ! ( ru_minflt ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage > ( ) ) ) . ru_majflt as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( rusage ) , "::" , stringify ! ( ru_majflt ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage > ( ) ) ) . ru_nswap as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( rusage ) , "::" , stringify ! ( ru_nswap ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage > ( ) ) ) . ru_inblock as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( rusage ) , "::" , stringify ! ( ru_inblock ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage > ( ) ) ) . ru_oublock as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( rusage ) , "::" , stringify ! ( ru_oublock ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage > ( ) ) ) . ru_msgsnd as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( rusage ) , "::" , stringify ! ( ru_msgsnd ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage > ( ) ) ) . ru_msgrcv as * const _ as usize } , 112usize , concat ! ( "Offset of field: " , stringify ! ( rusage ) , "::" , stringify ! ( ru_msgrcv ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage > ( ) ) ) . ru_nsignals as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( rusage ) , "::" , stringify ! ( ru_nsignals ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage > ( ) ) ) . ru_nvcsw as * const _ as usize } , 128usize , concat ! ( "Offset of field: " , stringify ! ( rusage ) , "::" , stringify ! ( ru_nvcsw ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage > ( ) ) ) . ru_nivcsw as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( rusage ) , "::" , stringify ! ( ru_nivcsw ) ) ) ; } pub type rusage_info_t = * mut :: std :: os :: raw :: c_void ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct rusage_info_v0 { pub ri_uuid : [ u8 ; 16usize ] , pub ri_user_time : u64 , pub ri_system_time : u64 , pub ri_pkg_idle_wkups : u64 , pub ri_interrupt_wkups : u64 , pub ri_pageins : u64 , pub ri_wired_size : u64 , pub ri_resident_size : u64 , pub ri_phys_footprint : u64 , pub ri_proc_start_abstime : u64 , pub ri_proc_exit_abstime : u64 , } # [ test ] fn bindgen_test_layout_rusage_info_v0 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < rusage_info_v0 > ( ) , 96usize , concat ! ( "Size of: " , stringify ! ( rusage_info_v0 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < rusage_info_v0 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( rusage_info_v0 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v0 > ( ) ) ) . ri_uuid as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v0 ) , "::" , stringify ! ( ri_uuid ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v0 > ( ) ) ) . ri_user_time as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v0 ) , "::" , stringify ! ( ri_user_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v0 > ( ) ) ) . ri_system_time as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v0 ) , "::" , stringify ! ( ri_system_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v0 > ( ) ) ) . ri_pkg_idle_wkups as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v0 ) , "::" , stringify ! ( ri_pkg_idle_wkups ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v0 > ( ) ) ) . ri_interrupt_wkups as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v0 ) , "::" , stringify ! ( ri_interrupt_wkups ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v0 > ( ) ) ) . ri_pageins as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v0 ) , "::" , stringify ! ( ri_pageins ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v0 > ( ) ) ) . ri_wired_size as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v0 ) , "::" , stringify ! ( ri_wired_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v0 > ( ) ) ) . ri_resident_size as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v0 ) , "::" , stringify ! ( ri_resident_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v0 > ( ) ) ) . ri_phys_footprint as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v0 ) , "::" , stringify ! ( ri_phys_footprint ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v0 > ( ) ) ) . ri_proc_start_abstime as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v0 ) , "::" , stringify ! ( ri_proc_start_abstime ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v0 > ( ) ) ) . ri_proc_exit_abstime as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v0 ) , "::" , stringify ! ( ri_proc_exit_abstime ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct rusage_info_v1 { pub ri_uuid : [ u8 ; 16usize ] , pub ri_user_time : u64 , pub ri_system_time : u64 , pub ri_pkg_idle_wkups : u64 , pub ri_interrupt_wkups : u64 , pub ri_pageins : u64 , pub ri_wired_size : u64 , pub ri_resident_size : u64 , pub ri_phys_footprint : u64 , pub ri_proc_start_abstime : u64 , pub ri_proc_exit_abstime : u64 , pub ri_child_user_time : u64 , pub ri_child_system_time : u64 , pub ri_child_pkg_idle_wkups : u64 , pub ri_child_interrupt_wkups : u64 , pub ri_child_pageins : u64 , pub ri_child_elapsed_abstime : u64 , } # [ test ] fn bindgen_test_layout_rusage_info_v1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < rusage_info_v1 > ( ) , 144usize , concat ! ( "Size of: " , stringify ! ( rusage_info_v1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < rusage_info_v1 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( rusage_info_v1 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v1 > ( ) ) ) . ri_uuid as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v1 ) , "::" , stringify ! ( ri_uuid ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v1 > ( ) ) ) . ri_user_time as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v1 ) , "::" , stringify ! ( ri_user_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v1 > ( ) ) ) . ri_system_time as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v1 ) , "::" , stringify ! ( ri_system_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v1 > ( ) ) ) . ri_pkg_idle_wkups as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v1 ) , "::" , stringify ! ( ri_pkg_idle_wkups ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v1 > ( ) ) ) . ri_interrupt_wkups as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v1 ) , "::" , stringify ! ( ri_interrupt_wkups ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v1 > ( ) ) ) . ri_pageins as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v1 ) , "::" , stringify ! ( ri_pageins ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v1 > ( ) ) ) . ri_wired_size as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v1 ) , "::" , stringify ! ( ri_wired_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v1 > ( ) ) ) . ri_resident_size as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v1 ) , "::" , stringify ! ( ri_resident_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v1 > ( ) ) ) . ri_phys_footprint as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v1 ) , "::" , stringify ! ( ri_phys_footprint ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v1 > ( ) ) ) . ri_proc_start_abstime as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v1 ) , "::" , stringify ! ( ri_proc_start_abstime ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v1 > ( ) ) ) . ri_proc_exit_abstime as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v1 ) , "::" , stringify ! ( ri_proc_exit_abstime ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v1 > ( ) ) ) . ri_child_user_time as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v1 ) , "::" , stringify ! ( ri_child_user_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v1 > ( ) ) ) . ri_child_system_time as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v1 ) , "::" , stringify ! ( ri_child_system_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v1 > ( ) ) ) . ri_child_pkg_idle_wkups as * const _ as usize } , 112usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v1 ) , "::" , stringify ! ( ri_child_pkg_idle_wkups ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v1 > ( ) ) ) . ri_child_interrupt_wkups as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v1 ) , "::" , stringify ! ( ri_child_interrupt_wkups ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v1 > ( ) ) ) . ri_child_pageins as * const _ as usize } , 128usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v1 ) , "::" , stringify ! ( ri_child_pageins ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v1 > ( ) ) ) . ri_child_elapsed_abstime as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v1 ) , "::" , stringify ! ( ri_child_elapsed_abstime ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct rusage_info_v2 { pub ri_uuid : [ u8 ; 16usize ] , pub ri_user_time : u64 , pub ri_system_time : u64 , pub ri_pkg_idle_wkups : u64 , pub ri_interrupt_wkups : u64 , pub ri_pageins : u64 , pub ri_wired_size : u64 , pub ri_resident_size : u64 , pub ri_phys_footprint : u64 , pub ri_proc_start_abstime : u64 , pub ri_proc_exit_abstime : u64 , pub ri_child_user_time : u64 , pub ri_child_system_time : u64 , pub ri_child_pkg_idle_wkups : u64 , pub ri_child_interrupt_wkups : u64 , pub ri_child_pageins : u64 , pub ri_child_elapsed_abstime : u64 , pub ri_diskio_bytesread : u64 , pub ri_diskio_byteswritten : u64 , } # [ test ] fn bindgen_test_layout_rusage_info_v2 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < rusage_info_v2 > ( ) , 160usize , concat ! ( "Size of: " , stringify ! ( rusage_info_v2 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < rusage_info_v2 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( rusage_info_v2 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v2 > ( ) ) ) . ri_uuid as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v2 ) , "::" , stringify ! ( ri_uuid ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v2 > ( ) ) ) . ri_user_time as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v2 ) , "::" , stringify ! ( ri_user_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v2 > ( ) ) ) . ri_system_time as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v2 ) , "::" , stringify ! ( ri_system_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v2 > ( ) ) ) . ri_pkg_idle_wkups as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v2 ) , "::" , stringify ! ( ri_pkg_idle_wkups ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v2 > ( ) ) ) . ri_interrupt_wkups as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v2 ) , "::" , stringify ! ( ri_interrupt_wkups ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v2 > ( ) ) ) . ri_pageins as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v2 ) , "::" , stringify ! ( ri_pageins ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v2 > ( ) ) ) . ri_wired_size as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v2 ) , "::" , stringify ! ( ri_wired_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v2 > ( ) ) ) . ri_resident_size as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v2 ) , "::" , stringify ! ( ri_resident_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v2 > ( ) ) ) . ri_phys_footprint as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v2 ) , "::" , stringify ! ( ri_phys_footprint ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v2 > ( ) ) ) . ri_proc_start_abstime as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v2 ) , "::" , stringify ! ( ri_proc_start_abstime ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v2 > ( ) ) ) . ri_proc_exit_abstime as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v2 ) , "::" , stringify ! ( ri_proc_exit_abstime ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v2 > ( ) ) ) . ri_child_user_time as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v2 ) , "::" , stringify ! ( ri_child_user_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v2 > ( ) ) ) . ri_child_system_time as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v2 ) , "::" , stringify ! ( ri_child_system_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v2 > ( ) ) ) . ri_child_pkg_idle_wkups as * const _ as usize } , 112usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v2 ) , "::" , stringify ! ( ri_child_pkg_idle_wkups ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v2 > ( ) ) ) . ri_child_interrupt_wkups as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v2 ) , "::" , stringify ! ( ri_child_interrupt_wkups ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v2 > ( ) ) ) . ri_child_pageins as * const _ as usize } , 128usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v2 ) , "::" , stringify ! ( ri_child_pageins ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v2 > ( ) ) ) . ri_child_elapsed_abstime as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v2 ) , "::" , stringify ! ( ri_child_elapsed_abstime ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v2 > ( ) ) ) . ri_diskio_bytesread as * const _ as usize } , 144usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v2 ) , "::" , stringify ! ( ri_diskio_bytesread ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v2 > ( ) ) ) . ri_diskio_byteswritten as * const _ as usize } , 152usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v2 ) , "::" , stringify ! ( ri_diskio_byteswritten ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct rusage_info_v3 { pub ri_uuid : [ u8 ; 16usize ] , pub ri_user_time : u64 , pub ri_system_time : u64 , pub ri_pkg_idle_wkups : u64 , pub ri_interrupt_wkups : u64 , pub ri_pageins : u64 , pub ri_wired_size : u64 , pub ri_resident_size : u64 , pub ri_phys_footprint : u64 , pub ri_proc_start_abstime : u64 , pub ri_proc_exit_abstime : u64 , pub ri_child_user_time : u64 , pub ri_child_system_time : u64 , pub ri_child_pkg_idle_wkups : u64 , pub ri_child_interrupt_wkups : u64 , pub ri_child_pageins : u64 , pub ri_child_elapsed_abstime : u64 , pub ri_diskio_bytesread : u64 , pub ri_diskio_byteswritten : u64 , pub ri_cpu_time_qos_default : u64 , pub ri_cpu_time_qos_maintenance : u64 , pub ri_cpu_time_qos_background : u64 , pub ri_cpu_time_qos_utility : u64 , pub ri_cpu_time_qos_legacy : u64 , pub ri_cpu_time_qos_user_initiated : u64 , pub ri_cpu_time_qos_user_interactive : u64 , pub ri_billed_system_time : u64 , pub ri_serviced_system_time : u64 , } # [ test ] fn bindgen_test_layout_rusage_info_v3 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < rusage_info_v3 > ( ) , 232usize , concat ! ( "Size of: " , stringify ! ( rusage_info_v3 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < rusage_info_v3 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( rusage_info_v3 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_uuid as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_uuid ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_user_time as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_user_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_system_time as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_system_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_pkg_idle_wkups as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_pkg_idle_wkups ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_interrupt_wkups as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_interrupt_wkups ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_pageins as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_pageins ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_wired_size as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_wired_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_resident_size as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_resident_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_phys_footprint as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_phys_footprint ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_proc_start_abstime as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_proc_start_abstime ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_proc_exit_abstime as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_proc_exit_abstime ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_child_user_time as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_child_user_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_child_system_time as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_child_system_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_child_pkg_idle_wkups as * const _ as usize } , 112usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_child_pkg_idle_wkups ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_child_interrupt_wkups as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_child_interrupt_wkups ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_child_pageins as * const _ as usize } , 128usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_child_pageins ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_child_elapsed_abstime as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_child_elapsed_abstime ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_diskio_bytesread as * const _ as usize } , 144usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_diskio_bytesread ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_diskio_byteswritten as * const _ as usize } , 152usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_diskio_byteswritten ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_cpu_time_qos_default as * const _ as usize } , 160usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_cpu_time_qos_default ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_cpu_time_qos_maintenance as * const _ as usize } , 168usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_cpu_time_qos_maintenance ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_cpu_time_qos_background as * const _ as usize } , 176usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_cpu_time_qos_background ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_cpu_time_qos_utility as * const _ as usize } , 184usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_cpu_time_qos_utility ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_cpu_time_qos_legacy as * const _ as usize } , 192usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_cpu_time_qos_legacy ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_cpu_time_qos_user_initiated as * const _ as usize } , 200usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_cpu_time_qos_user_initiated ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_cpu_time_qos_user_interactive as * const _ as usize } , 208usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_cpu_time_qos_user_interactive ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_billed_system_time as * const _ as usize } , 216usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_billed_system_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v3 > ( ) ) ) . ri_serviced_system_time as * const _ as usize } , 224usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v3 ) , "::" , stringify ! ( ri_serviced_system_time ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct rusage_info_v4 { pub ri_uuid : [ u8 ; 16usize ] , pub ri_user_time : u64 , pub ri_system_time : u64 , pub ri_pkg_idle_wkups : u64 , pub ri_interrupt_wkups : u64 , pub ri_pageins : u64 , pub ri_wired_size : u64 , pub ri_resident_size : u64 , pub ri_phys_footprint : u64 , pub ri_proc_start_abstime : u64 , pub ri_proc_exit_abstime : u64 , pub ri_child_user_time : u64 , pub ri_child_system_time : u64 , pub ri_child_pkg_idle_wkups : u64 , pub ri_child_interrupt_wkups : u64 , pub ri_child_pageins : u64 , pub ri_child_elapsed_abstime : u64 , pub ri_diskio_bytesread : u64 , pub ri_diskio_byteswritten : u64 , pub ri_cpu_time_qos_default : u64 , pub ri_cpu_time_qos_maintenance : u64 , pub ri_cpu_time_qos_background : u64 , pub ri_cpu_time_qos_utility : u64 , pub ri_cpu_time_qos_legacy : u64 , pub ri_cpu_time_qos_user_initiated : u64 , pub ri_cpu_time_qos_user_interactive : u64 , pub ri_billed_system_time : u64 , pub ri_serviced_system_time : u64 , pub ri_logical_writes : u64 , pub ri_lifetime_max_phys_footprint : u64 , pub ri_instructions : u64 , pub ri_cycles : u64 , pub ri_billed_energy : u64 , pub ri_serviced_energy : u64 , pub ri_interval_max_phys_footprint : u64 , pub ri_unused : [ u64 ; 1usize ] , } # [ test ] fn bindgen_test_layout_rusage_info_v4 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < rusage_info_v4 > ( ) , 296usize , concat ! ( "Size of: " , stringify ! ( rusage_info_v4 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < rusage_info_v4 > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( rusage_info_v4 ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_uuid as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_uuid ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_user_time as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_user_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_system_time as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_system_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_pkg_idle_wkups as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_pkg_idle_wkups ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_interrupt_wkups as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_interrupt_wkups ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_pageins as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_pageins ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_wired_size as * const _ as usize } , 56usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_wired_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_resident_size as * const _ as usize } , 64usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_resident_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_phys_footprint as * const _ as usize } , 72usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_phys_footprint ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_proc_start_abstime as * const _ as usize } , 80usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_proc_start_abstime ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_proc_exit_abstime as * const _ as usize } , 88usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_proc_exit_abstime ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_child_user_time as * const _ as usize } , 96usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_child_user_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_child_system_time as * const _ as usize } , 104usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_child_system_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_child_pkg_idle_wkups as * const _ as usize } , 112usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_child_pkg_idle_wkups ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_child_interrupt_wkups as * const _ as usize } , 120usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_child_interrupt_wkups ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_child_pageins as * const _ as usize } , 128usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_child_pageins ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_child_elapsed_abstime as * const _ as usize } , 136usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_child_elapsed_abstime ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_diskio_bytesread as * const _ as usize } , 144usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_diskio_bytesread ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_diskio_byteswritten as * const _ as usize } , 152usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_diskio_byteswritten ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_cpu_time_qos_default as * const _ as usize } , 160usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_cpu_time_qos_default ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_cpu_time_qos_maintenance as * const _ as usize } , 168usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_cpu_time_qos_maintenance ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_cpu_time_qos_background as * const _ as usize } , 176usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_cpu_time_qos_background ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_cpu_time_qos_utility as * const _ as usize } , 184usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_cpu_time_qos_utility ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_cpu_time_qos_legacy as * const _ as usize } , 192usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_cpu_time_qos_legacy ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_cpu_time_qos_user_initiated as * const _ as usize } , 200usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_cpu_time_qos_user_initiated ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_cpu_time_qos_user_interactive as * const _ as usize } , 208usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_cpu_time_qos_user_interactive ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_billed_system_time as * const _ as usize } , 216usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_billed_system_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_serviced_system_time as * const _ as usize } , 224usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_serviced_system_time ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_logical_writes as * const _ as usize } , 232usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_logical_writes ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_lifetime_max_phys_footprint as * const _ as usize } , 240usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_lifetime_max_phys_footprint ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_instructions as * const _ as usize } , 248usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_instructions ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_cycles as * const _ as usize } , 256usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_cycles ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_billed_energy as * const _ as usize } , 264usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_billed_energy ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_serviced_energy as * const _ as usize } , 272usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_serviced_energy ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_interval_max_phys_footprint as * const _ as usize } , 280usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_interval_max_phys_footprint ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rusage_info_v4 > ( ) ) ) . ri_unused as * const _ as usize } , 288usize , concat ! ( "Offset of field: " , stringify ! ( rusage_info_v4 ) , "::" , stringify ! ( ri_unused ) ) ) ; } pub type rusage_info_current = rusage_info_v4 ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct rlimit { pub rlim_cur : rlim_t , pub rlim_max : rlim_t , } # [ test ] fn bindgen_test_layout_rlimit ( ) { assert_eq ! ( :: std :: mem :: size_of :: < rlimit > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( rlimit ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < rlimit > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( rlimit ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rlimit > ( ) ) ) . rlim_cur as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( rlimit ) , "::" , stringify ! ( rlim_cur ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < rlimit > ( ) ) ) . rlim_max as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( rlimit ) , "::" , stringify ! ( rlim_max ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct proc_rlimit_control_wakeupmon { pub wm_flags : u32 , pub wm_rate : i32 , } # [ test ] fn bindgen_test_layout_proc_rlimit_control_wakeupmon ( ) { assert_eq ! ( :: std :: mem :: size_of :: < proc_rlimit_control_wakeupmon > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( proc_rlimit_control_wakeupmon ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < proc_rlimit_control_wakeupmon > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( proc_rlimit_control_wakeupmon ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < proc_rlimit_control_wakeupmon > ( ) ) ) . wm_flags as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( proc_rlimit_control_wakeupmon ) , "::" , stringify ! ( wm_flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < proc_rlimit_control_wakeupmon > ( ) ) ) . wm_rate as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( proc_rlimit_control_wakeupmon ) , "::" , stringify ! ( wm_rate ) ) ) ; } extern "C" { pub fn getpriority ( arg1 : :: std :: os :: raw :: c_int , arg2 : id_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getiopolicy_np ( arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getrlimit ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut rlimit ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getrusage ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut rusage ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setpriority ( arg1 : :: std :: os :: raw :: c_int , arg2 : id_t , arg3 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setiopolicy_np ( arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setrlimit ( arg1 : :: std :: os :: raw :: c_int , arg2 : * const rlimit ) -> :: std :: os :: raw :: c_int ; } # [ repr ( C ) ] # [ derive ( Copy , Clone ) ] pub union wait { pub w_status : :: std :: os :: raw :: c_int , pub w_T : wait__bindgen_ty_1 , pub w_S : wait__bindgen_ty_2 , _bindgen_union_align : u32 , } # [ repr ( C ) ] # [ repr ( align ( 4 ) ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct wait__bindgen_ty_1 { pub _bitfield_1 : __BindgenBitfieldUnit < [ u8 ; 4usize ] , u16 > , } # [ test ] fn bindgen_test_layout_wait__bindgen_ty_1 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < wait__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( wait__bindgen_ty_1 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < wait__bindgen_ty_1 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( wait__bindgen_ty_1 ) ) ) ; } impl wait__bindgen_ty_1 { # [ inline ] pub fn w_Termsig ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 0usize , 7u8 ) as u32 ) } } # [ inline ] pub fn set_w_Termsig ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 0usize , 7u8 , val as u64 ) } } # [ inline ] pub fn w_Coredump ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 7usize , 1u8 ) as u32 ) } } # [ inline ] pub fn set_w_Coredump ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 7usize , 1u8 , val as u64 ) } } # [ inline ] pub fn w_Retcode ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 8usize , 8u8 ) as u32 ) } } # [ inline ] pub fn set_w_Retcode ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 8usize , 8u8 , val as u64 ) } } # [ inline ] pub fn w_Filler ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 16usize , 16u8 ) as u32 ) } } # [ inline ] pub fn set_w_Filler ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 16usize , 16u8 , val as u64 ) } } # [ inline ] pub fn new_bitfield_1 ( w_Termsig : :: std :: os :: raw :: c_uint , w_Coredump : :: std :: os :: raw :: c_uint , w_Retcode : :: std :: os :: raw :: c_uint , w_Filler : :: std :: os :: raw :: c_uint ) -> __BindgenBitfieldUnit < [ u8 ; 4usize ] , u16 > { let mut __bindgen_bitfield_unit : __BindgenBitfieldUnit < [ u8 ; 4usize ] , u16 > = Default :: default ( ) ; __bindgen_bitfield_unit . set ( 0usize , 7u8 , { let w_Termsig : u32 = unsafe { :: std :: mem :: transmute ( w_Termsig ) } ; w_Termsig as u64 } ) ; __bindgen_bitfield_unit . set ( 7usize , 1u8 , { let w_Coredump : u32 = unsafe { :: std :: mem :: transmute ( w_Coredump ) } ; w_Coredump as u64 } ) ; __bindgen_bitfield_unit . set ( 8usize , 8u8 , { let w_Retcode : u32 = unsafe { :: std :: mem :: transmute ( w_Retcode ) } ; w_Retcode as u64 } ) ; __bindgen_bitfield_unit . set ( 16usize , 16u8 , { let w_Filler : u32 = unsafe { :: std :: mem :: transmute ( w_Filler ) } ; w_Filler as u64 } ) ; __bindgen_bitfield_unit } } # [ repr ( C ) ] # [ repr ( align ( 4 ) ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct wait__bindgen_ty_2 { pub _bitfield_1 : __BindgenBitfieldUnit < [ u8 ; 4usize ] , u16 > , } # [ test ] fn bindgen_test_layout_wait__bindgen_ty_2 ( ) { assert_eq ! ( :: std :: mem :: size_of :: < wait__bindgen_ty_2 > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( wait__bindgen_ty_2 ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < wait__bindgen_ty_2 > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( wait__bindgen_ty_2 ) ) ) ; } impl wait__bindgen_ty_2 { # [ inline ] pub fn w_Stopval ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 0usize , 8u8 ) as u32 ) } } # [ inline ] pub fn set_w_Stopval ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 0usize , 8u8 , val as u64 ) } } # [ inline ] pub fn w_Stopsig ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 8usize , 8u8 ) as u32 ) } } # [ inline ] pub fn set_w_Stopsig ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 8usize , 8u8 , val as u64 ) } } # [ inline ] pub fn w_Filler ( & self ) -> :: std :: os :: raw :: c_uint { unsafe { :: std :: mem :: transmute ( self . _bitfield_1 . get ( 16usize , 16u8 ) as u32 ) } } # [ inline ] pub fn set_w_Filler ( & mut self , val : :: std :: os :: raw :: c_uint ) { unsafe { let val : u32 = :: std :: mem :: transmute ( val ) ; self . _bitfield_1 . set ( 16usize , 16u8 , val as u64 ) } } # [ inline ] pub fn new_bitfield_1 ( w_Stopval : :: std :: os :: raw :: c_uint , w_Stopsig : :: std :: os :: raw :: c_uint , w_Filler : :: std :: os :: raw :: c_uint ) -> __BindgenBitfieldUnit < [ u8 ; 4usize ] , u16 > { let mut __bindgen_bitfield_unit : __BindgenBitfieldUnit < [ u8 ; 4usize ] , u16 > = Default :: default ( ) ; __bindgen_bitfield_unit . set ( 0usize , 8u8 , { let w_Stopval : u32 = unsafe { :: std :: mem :: transmute ( w_Stopval ) } ; w_Stopval as u64 } ) ; __bindgen_bitfield_unit . set ( 8usize , 8u8 , { let w_Stopsig : u32 = unsafe { :: std :: mem :: transmute ( w_Stopsig ) } ; w_Stopsig as u64 } ) ; __bindgen_bitfield_unit . set ( 16usize , 16u8 , { let w_Filler : u32 = unsafe { :: std :: mem :: transmute ( w_Filler ) } ; w_Filler as u64 } ) ; __bindgen_bitfield_unit } } # [ test ] fn bindgen_test_layout_wait ( ) { assert_eq ! ( :: std :: mem :: size_of :: < wait > ( ) , 4usize , concat ! ( "Size of: " , stringify ! ( wait ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < wait > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( wait ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < wait > ( ) ) ) . w_status as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( wait ) , "::" , stringify ! ( w_status ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < wait > ( ) ) ) . w_T as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( wait ) , "::" , stringify ! ( w_T ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < wait > ( ) ) ) . w_S as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( wait ) , "::" , stringify ! ( w_S ) ) ) ; } extern "C" { pub fn wait ( arg1 : * mut :: std :: os :: raw :: c_int ) -> pid_t ; } extern "C" { pub fn waitpid ( arg1 : pid_t , arg2 : * mut :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int ) -> pid_t ; } extern "C" { pub fn waitid ( arg1 : idtype_t , arg2 : id_t , arg3 : * mut siginfo_t , arg4 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn wait3 ( arg1 : * mut :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut rusage ) -> pid_t ; } extern "C" { pub fn wait4 ( arg1 : pid_t , arg2 : * mut :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * mut rusage ) -> pid_t ; } extern "C" { pub fn alloca ( arg1 : :: std :: os :: raw :: c_ulong ) -> * mut :: std :: os :: raw :: c_void ; } pub type ct_rune_t = __darwin_ct_rune_t ; pub type rune_t = __darwin_rune_t ; pub type wchar_t = __darwin_wchar_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct div_t { pub quot : :: std :: os :: raw :: c_int , pub rem : :: std :: os :: raw :: c_int , } # [ test ] fn bindgen_test_layout_div_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < div_t > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( div_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < div_t > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( div_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < div_t > ( ) ) ) . quot as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( div_t ) , "::" , stringify ! ( quot ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < div_t > ( ) ) ) . rem as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( div_t ) , "::" , stringify ! ( rem ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct ldiv_t { pub quot : :: std :: os :: raw :: c_long , pub rem : :: std :: os :: raw :: c_long , } # [ test ] fn bindgen_test_layout_ldiv_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < ldiv_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( ldiv_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < ldiv_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( ldiv_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ldiv_t > ( ) ) ) . quot as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( ldiv_t ) , "::" , stringify ! ( quot ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < ldiv_t > ( ) ) ) . rem as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( ldiv_t ) , "::" , stringify ! ( rem ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct lldiv_t { pub quot : :: std :: os :: raw :: c_longlong , pub rem : :: std :: os :: raw :: c_longlong , } # [ test ] fn bindgen_test_layout_lldiv_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < lldiv_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( lldiv_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < lldiv_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( lldiv_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lldiv_t > ( ) ) ) . quot as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( lldiv_t ) , "::" , stringify ! ( quot ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < lldiv_t > ( ) ) ) . rem as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( lldiv_t ) , "::" , stringify ! ( rem ) ) ) ; } extern "C" { pub static mut __mb_cur_max : :: std :: os :: raw :: c_int ; } extern "C" { pub fn malloc ( __size : :: std :: os :: raw :: c_ulong ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn calloc ( __count : :: std :: os :: raw :: c_ulong , __size : :: std :: os :: raw :: c_ulong ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn free ( arg1 : * mut :: std :: os :: raw :: c_void ) ; } extern "C" { pub fn realloc ( __ptr : * mut :: std :: os :: raw :: c_void , __size : :: std :: os :: raw :: c_ulong ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn valloc ( arg1 : usize ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn posix_memalign ( __memptr : * mut * mut :: std :: os :: raw :: c_void , __alignment : usize , __size : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn abort ( ) ; } extern "C" { pub fn abs ( arg1 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn atexit ( arg1 : :: std :: option :: Option < unsafe extern "C" fn ( ) > ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn atof ( arg1 : * const :: std :: os :: raw :: c_char ) -> f64 ; } extern "C" { pub fn atoi ( arg1 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn atol ( arg1 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn atoll ( arg1 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn bsearch ( __key : * const :: std :: os :: raw :: c_void , __base : * const :: std :: os :: raw :: c_void , __nel : usize , __width : usize , __compar : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn div ( arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int ) -> div_t ; } extern "C" { pub fn exit ( arg1 : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn getenv ( arg1 : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn labs ( arg1 : :: std :: os :: raw :: c_long ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn ldiv ( arg1 : :: std :: os :: raw :: c_long , arg2 : :: std :: os :: raw :: c_long ) -> ldiv_t ; } extern "C" { pub fn llabs ( arg1 : :: std :: os :: raw :: c_longlong ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn lldiv ( arg1 : :: std :: os :: raw :: c_longlong , arg2 : :: std :: os :: raw :: c_longlong ) -> lldiv_t ; } extern "C" { pub fn mblen ( __s : * const :: std :: os :: raw :: c_char , __n : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mbstowcs ( arg1 : * mut wchar_t , arg2 : * const :: std :: os :: raw :: c_char , arg3 : usize ) -> usize ; } extern "C" { pub fn mbtowc ( arg1 : * mut wchar_t , arg2 : * const :: std :: os :: raw :: c_char , arg3 : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn qsort ( __base : * mut :: std :: os :: raw :: c_void , __nel : usize , __width : usize , __compar : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > ) ; } extern "C" { pub fn rand ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn srand ( arg1 : :: std :: os :: raw :: c_uint ) ; } extern "C" { pub fn strtod ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * mut * mut :: std :: os :: raw :: c_char ) -> f64 ; } extern "C" { pub fn strtof ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * mut * mut :: std :: os :: raw :: c_char ) -> f32 ; } extern "C" { pub fn strtol ( __str : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn strtold ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * mut * mut :: std :: os :: raw :: c_char ) -> u128 ; } extern "C" { pub fn strtoll ( __str : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn strtoul ( __str : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_ulong ; } extern "C" { pub fn strtoull ( __str : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub fn system ( arg1 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn wcstombs ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : * const wchar_t , arg3 : usize ) -> usize ; } extern "C" { pub fn wctomb ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : wchar_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn _Exit ( arg1 : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn a64l ( arg1 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn drand48 ( ) -> f64 ; } extern "C" { pub fn ecvt ( arg1 : f64 , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn erand48 ( arg1 : * mut :: std :: os :: raw :: c_ushort ) -> f64 ; } extern "C" { pub fn fcvt ( arg1 : f64 , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn gcvt ( arg1 : f64 , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn getsubopt ( arg1 : * mut * mut :: std :: os :: raw :: c_char , arg2 : * const * mut :: std :: os :: raw :: c_char , arg3 : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn grantpt ( arg1 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn initstate ( arg1 : :: std :: os :: raw :: c_uint , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : usize ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn jrand48 ( arg1 : * mut :: std :: os :: raw :: c_ushort ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn l64a ( arg1 : :: std :: os :: raw :: c_long ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn lcong48 ( arg1 : * mut :: std :: os :: raw :: c_ushort ) ; } extern "C" { pub fn lrand48 ( ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn mktemp ( arg1 : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn mkstemp ( arg1 : * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mrand48 ( ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn nrand48 ( arg1 : * mut :: std :: os :: raw :: c_ushort ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn posix_openpt ( arg1 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ptsname ( arg1 : :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn ptsname_r ( fildes : :: std :: os :: raw :: c_int , buffer : * mut :: std :: os :: raw :: c_char , buflen : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn putenv ( arg1 : * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn random ( ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn rand_r ( arg1 : * mut :: std :: os :: raw :: c_uint ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_realpath$DARWIN_EXTSN" ] pub fn realpath ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn seed48 ( arg1 : * mut :: std :: os :: raw :: c_ushort ) -> * mut :: std :: os :: raw :: c_ushort ; } extern "C" { pub fn setenv ( __name : * const :: std :: os :: raw :: c_char , __value : * const :: std :: os :: raw :: c_char , __overwrite : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setkey ( arg1 : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn setstate ( arg1 : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn srand48 ( arg1 : :: std :: os :: raw :: c_long ) ; } extern "C" { pub fn srandom ( arg1 : :: std :: os :: raw :: c_uint ) ; } extern "C" { pub fn unlockpt ( arg1 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn unsetenv ( arg1 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } pub type dev_t = __darwin_dev_t ; pub type mode_t = __darwin_mode_t ; extern "C" { pub fn arc4random ( ) -> u32 ; } extern "C" { pub fn arc4random_addrandom ( arg1 : * mut :: std :: os :: raw :: c_uchar , arg2 : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn arc4random_buf ( __buf : * mut :: std :: os :: raw :: c_void , __nbytes : usize ) ; } extern "C" { pub fn arc4random_stir ( ) ; } extern "C" { pub fn arc4random_uniform ( __upper_bound : u32 ) -> u32 ; } extern "C" { pub fn atexit_b ( arg1 : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn bsearch_b ( __key : * const :: std :: os :: raw :: c_void , __base : * const :: std :: os :: raw :: c_void , __nel : usize , __width : usize , __compar : * mut :: std :: os :: raw :: c_void ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn cgetcap ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn cgetclose ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn cgetent ( arg1 : * mut * mut :: std :: os :: raw :: c_char , arg2 : * mut * mut :: std :: os :: raw :: c_char , arg3 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn cgetfirst ( arg1 : * mut * mut :: std :: os :: raw :: c_char , arg2 : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn cgetmatch ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn cgetnext ( arg1 : * mut * mut :: std :: os :: raw :: c_char , arg2 : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn cgetnum ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut :: std :: os :: raw :: c_long ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn cgetset ( arg1 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn cgetstr ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn cgetustr ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_daemon$1050" ] pub fn daemon ( arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn devname ( arg1 : dev_t , arg2 : mode_t ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn devname_r ( arg1 : dev_t , arg2 : mode_t , buf : * mut :: std :: os :: raw :: c_char , len : :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn getbsize ( arg1 : * mut :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_long ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn getloadavg ( arg1 : * mut f64 , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getprogname ( ) -> * const :: std :: os :: raw :: c_char ; } extern "C" { pub fn heapsort ( __base : * mut :: std :: os :: raw :: c_void , __nel : usize , __width : usize , __compar : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn heapsort_b ( __base : * mut :: std :: os :: raw :: c_void , __nel : usize , __width : usize , __compar : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mergesort ( __base : * mut :: std :: os :: raw :: c_void , __nel : usize , __width : usize , __compar : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mergesort_b ( __base : * mut :: std :: os :: raw :: c_void , __nel : usize , __width : usize , __compar : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn psort ( __base : * mut :: std :: os :: raw :: c_void , __nel : usize , __width : usize , __compar : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * const :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > ) ; } extern "C" { pub fn psort_b ( __base : * mut :: std :: os :: raw :: c_void , __nel : usize , __width : usize , __compar : * mut :: std :: os :: raw :: c_void ) ; } extern "C" { pub fn psort_r ( __base : * mut :: std :: os :: raw :: c_void , __nel : usize , __width : usize , arg1 : * mut :: std :: os :: raw :: c_void , __compar : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_void , arg3 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > ) ; } extern "C" { pub fn qsort_b ( __base : * mut :: std :: os :: raw :: c_void , __nel : usize , __width : usize , __compar : * mut :: std :: os :: raw :: c_void ) ; } extern "C" { pub fn qsort_r ( __base : * mut :: std :: os :: raw :: c_void , __nel : usize , __width : usize , arg1 : * mut :: std :: os :: raw :: c_void , __compar : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void , arg2 : * const :: std :: os :: raw :: c_void , arg3 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int > ) ; } extern "C" { pub fn radixsort ( __base : * mut * const :: std :: os :: raw :: c_uchar , __nel : :: std :: os :: raw :: c_int , __table : * const :: std :: os :: raw :: c_uchar , __endbyte : :: std :: os :: raw :: c_uint ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setprogname ( arg1 : * const :: std :: os :: raw :: c_char ) ; } extern "C" { pub fn sradixsort ( __base : * mut * const :: std :: os :: raw :: c_uchar , __nel : :: std :: os :: raw :: c_int , __table : * const :: std :: os :: raw :: c_uchar , __endbyte : :: std :: os :: raw :: c_uint ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sranddev ( ) ; } extern "C" { pub fn srandomdev ( ) ; } extern "C" { pub fn reallocf ( __ptr : * mut :: std :: os :: raw :: c_void , __size : usize ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn strtoq ( __str : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_longlong ; } extern "C" { pub fn strtouq ( __str : * const :: std :: os :: raw :: c_char , __endptr : * mut * mut :: std :: os :: raw :: c_char , __base : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_ulonglong ; } extern "C" { pub static mut suboptarg : * mut :: std :: os :: raw :: c_char ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct sched_param { pub sched_priority : :: std :: os :: raw :: c_int , pub __opaque : [ :: std :: os :: raw :: c_char ; 4usize ] , } # [ test ] fn bindgen_test_layout_sched_param ( ) { assert_eq ! ( :: std :: mem :: size_of :: < sched_param > ( ) , 8usize , concat ! ( "Size of: " , stringify ! ( sched_param ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < sched_param > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( sched_param ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sched_param > ( ) ) ) . sched_priority as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( sched_param ) , "::" , stringify ! ( sched_priority ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < sched_param > ( ) ) ) . __opaque as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( sched_param ) , "::" , stringify ! ( __opaque ) ) ) ; } extern "C" { pub fn sched_yield ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sched_get_priority_min ( arg1 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sched_get_priority_max ( arg1 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } pub type clock_t = __darwin_clock_t ; pub type time_t = __darwin_time_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct timespec { pub tv_sec : __darwin_time_t , pub tv_nsec : :: std :: os :: raw :: c_long , } # [ test ] fn bindgen_test_layout_timespec ( ) { assert_eq ! ( :: std :: mem :: size_of :: < timespec > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( timespec ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < timespec > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( timespec ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < timespec > ( ) ) ) . tv_sec as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( timespec ) , "::" , stringify ! ( tv_sec ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < timespec > ( ) ) ) . tv_nsec as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( timespec ) , "::" , stringify ! ( tv_nsec ) ) ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct tm { pub tm_sec : :: std :: os :: raw :: c_int , pub tm_min : :: std :: os :: raw :: c_int , pub tm_hour : :: std :: os :: raw :: c_int , pub tm_mday : :: std :: os :: raw :: c_int , pub tm_mon : :: std :: os :: raw :: c_int , pub tm_year : :: std :: os :: raw :: c_int , pub tm_wday : :: std :: os :: raw :: c_int , pub tm_yday : :: std :: os :: raw :: c_int , pub tm_isdst : :: std :: os :: raw :: c_int , pub tm_gmtoff : :: std :: os :: raw :: c_long , pub tm_zone : * mut :: std :: os :: raw :: c_char , } # [ test ] fn bindgen_test_layout_tm ( ) { assert_eq ! ( :: std :: mem :: size_of :: < tm > ( ) , 56usize , concat ! ( "Size of: " , stringify ! ( tm ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < tm > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( tm ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_sec as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_sec ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_min as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_min ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_hour as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_hour ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_mday as * const _ as usize } , 12usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_mday ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_mon as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_mon ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_year as * const _ as usize } , 20usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_year ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_wday as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_wday ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_yday as * const _ as usize } , 28usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_yday ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_isdst as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_isdst ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_gmtoff as * const _ as usize } , 40usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_gmtoff ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < tm > ( ) ) ) . tm_zone as * const _ as usize } , 48usize , concat ! ( "Offset of field: " , stringify ! ( tm ) , "::" , stringify ! ( tm_zone ) ) ) ; } extern "C" { pub static mut tzname : [ * mut :: std :: os :: raw :: c_char ; 0usize ] ; } extern "C" { pub static mut getdate_err : :: std :: os :: raw :: c_int ; } extern "C" { pub static mut timezone : :: std :: os :: raw :: c_long ; } extern "C" { pub static mut daylight : :: std :: os :: raw :: c_int ; } extern "C" { pub fn asctime ( arg1 : * const tm ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn clock ( ) -> clock_t ; } extern "C" { pub fn ctime ( arg1 : * const time_t ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn difftime ( arg1 : time_t , arg2 : time_t ) -> f64 ; } extern "C" { pub fn getdate ( arg1 : * const :: std :: os :: raw :: c_char ) -> * mut tm ; } extern "C" { pub fn gmtime ( arg1 : * const time_t ) -> * mut tm ; } extern "C" { pub fn localtime ( arg1 : * const time_t ) -> * mut tm ; } extern "C" { pub fn mktime ( arg1 : * mut tm ) -> time_t ; } extern "C" { pub fn strftime ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : usize , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * const tm ) -> usize ; } extern "C" { pub fn strptime ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut tm ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn time ( arg1 : * mut time_t ) -> time_t ; } extern "C" { pub fn tzset ( ) ; } extern "C" { pub fn asctime_r ( arg1 : * const tm , arg2 : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn ctime_r ( arg1 : * const time_t , arg2 : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn gmtime_r ( arg1 : * const time_t , arg2 : * mut tm ) -> * mut tm ; } extern "C" { pub fn localtime_r ( arg1 : * const time_t , arg2 : * mut tm ) -> * mut tm ; } extern "C" { pub fn posix2time ( arg1 : time_t ) -> time_t ; } extern "C" { pub fn tzsetwall ( ) ; } extern "C" { pub fn time2posix ( arg1 : time_t ) -> time_t ; } extern "C" { pub fn timelocal ( arg1 : * mut tm ) -> time_t ; } extern "C" { pub fn timegm ( arg1 : * mut tm ) -> time_t ; } extern "C" { pub fn nanosleep ( __rqtp : * const timespec , __rmtp : * mut timespec ) -> :: std :: os :: raw :: c_int ; } pub const clockid_t__CLOCK_REALTIME : clockid_t = 0 ; pub const clockid_t__CLOCK_MONOTONIC : clockid_t = 6 ; pub const clockid_t__CLOCK_MONOTONIC_RAW : clockid_t = 4 ; pub const clockid_t__CLOCK_MONOTONIC_RAW_APPROX : clockid_t = 5 ; pub const clockid_t__CLOCK_UPTIME_RAW : clockid_t = 8 ; pub const clockid_t__CLOCK_UPTIME_RAW_APPROX : clockid_t = 9 ; pub const clockid_t__CLOCK_PROCESS_CPUTIME_ID : clockid_t = 12 ; pub const clockid_t__CLOCK_THREAD_CPUTIME_ID : clockid_t = 16 ; pub type clockid_t = u32 ; extern "C" { pub fn clock_getres ( __clock_id : clockid_t , __res : * mut timespec ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn clock_gettime ( __clock_id : clockid_t , __tp : * mut timespec ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn clock_gettime_nsec_np ( __clock_id : clockid_t ) -> __uint64_t ; } extern "C" { pub fn clock_settime ( __clock_id : clockid_t , __tp : * const timespec ) -> :: std :: os :: raw :: c_int ; } pub type pthread_cond_t = __darwin_pthread_cond_t ; pub type pthread_condattr_t = __darwin_pthread_condattr_t ; pub type pthread_key_t = __darwin_pthread_key_t ; pub type pthread_mutex_t = __darwin_pthread_mutex_t ; pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t ; pub type pthread_once_t = __darwin_pthread_once_t ; pub type pthread_rwlock_t = __darwin_pthread_rwlock_t ; pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t ; pub type pthread_t = __darwin_pthread_t ; pub const QOS_CLASS_USER_INTERACTIVE : _bindgen_ty_1 = 33 ; pub const QOS_CLASS_USER_INITIATED : _bindgen_ty_1 = 25 ; pub const QOS_CLASS_DEFAULT : _bindgen_ty_1 = 21 ; pub const QOS_CLASS_UTILITY : _bindgen_ty_1 = 17 ; pub const QOS_CLASS_BACKGROUND : _bindgen_ty_1 = 9 ; pub const QOS_CLASS_UNSPECIFIED : _bindgen_ty_1 = 0 ; pub type _bindgen_ty_1 = u32 ; pub type qos_class_t = :: std :: os :: raw :: c_uint ; extern "C" { pub fn qos_class_self ( ) -> qos_class_t ; } extern "C" { pub fn qos_class_main ( ) -> qos_class_t ; } extern "C" { pub fn pthread_attr_set_qos_class_np ( __attr : * mut pthread_attr_t , __qos_class : qos_class_t , __relative_priority : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_attr_get_qos_class_np ( __attr : * mut pthread_attr_t , __qos_class : * mut qos_class_t , __relative_priority : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_set_qos_class_self_np ( __qos_class : qos_class_t , __relative_priority : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_get_qos_class_np ( __pthread : pthread_t , __qos_class : * mut qos_class_t , __relative_priority : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct pthread_override_s { _unused : [ u8 ; 0 ] , } pub type pthread_override_t = * mut pthread_override_s ; extern "C" { pub fn pthread_override_qos_class_start_np ( __pthread : pthread_t , __qos_class : qos_class_t , __relative_priority : :: std :: os :: raw :: c_int ) -> pthread_override_t ; } extern "C" { pub fn pthread_override_qos_class_end_np ( __override : pthread_override_t ) -> :: std :: os :: raw :: c_int ; } pub type mach_port_t = __darwin_mach_port_t ; extern "C" { pub fn pthread_atfork ( arg1 : :: std :: option :: Option < unsafe extern "C" fn ( ) > , arg2 : :: std :: option :: Option < unsafe extern "C" fn ( ) > , arg3 : :: std :: option :: Option < unsafe extern "C" fn ( ) > ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_attr_destroy ( arg1 : * mut pthread_attr_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_attr_getdetachstate ( arg1 : * const pthread_attr_t , arg2 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_attr_getguardsize ( arg1 : * const pthread_attr_t , arg2 : * mut usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_attr_getinheritsched ( arg1 : * const pthread_attr_t , arg2 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_attr_getschedparam ( arg1 : * const pthread_attr_t , arg2 : * mut sched_param ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_attr_getschedpolicy ( arg1 : * const pthread_attr_t , arg2 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_attr_getscope ( arg1 : * const pthread_attr_t , arg2 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_attr_getstack ( arg1 : * const pthread_attr_t , arg2 : * mut * mut :: std :: os :: raw :: c_void , arg3 : * mut usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_attr_getstackaddr ( arg1 : * const pthread_attr_t , arg2 : * mut * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_attr_getstacksize ( arg1 : * const pthread_attr_t , arg2 : * mut usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_attr_init ( arg1 : * mut pthread_attr_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_attr_setdetachstate ( arg1 : * mut pthread_attr_t , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_attr_setguardsize ( arg1 : * mut pthread_attr_t , arg2 : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_attr_setinheritsched ( arg1 : * mut pthread_attr_t , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_attr_setschedparam ( arg1 : * mut pthread_attr_t , arg2 : * const sched_param ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_attr_setschedpolicy ( arg1 : * mut pthread_attr_t , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_attr_setscope ( arg1 : * mut pthread_attr_t , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_attr_setstack ( arg1 : * mut pthread_attr_t , arg2 : * mut :: std :: os :: raw :: c_void , arg3 : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_attr_setstackaddr ( arg1 : * mut pthread_attr_t , arg2 : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_attr_setstacksize ( arg1 : * mut pthread_attr_t , arg2 : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_cancel ( arg1 : pthread_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_cond_broadcast ( arg1 : * mut pthread_cond_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_cond_destroy ( arg1 : * mut pthread_cond_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_cond_init ( arg1 : * mut pthread_cond_t , arg2 : * const pthread_condattr_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_cond_signal ( arg1 : * mut pthread_cond_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_cond_timedwait ( arg1 : * mut pthread_cond_t , arg2 : * mut pthread_mutex_t , arg3 : * const timespec ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_cond_wait ( arg1 : * mut pthread_cond_t , arg2 : * mut pthread_mutex_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_condattr_destroy ( arg1 : * mut pthread_condattr_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_condattr_init ( arg1 : * mut pthread_condattr_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_condattr_getpshared ( arg1 : * const pthread_condattr_t , arg2 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_condattr_setpshared ( arg1 : * mut pthread_condattr_t , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_create ( arg1 : * mut pthread_t , arg2 : * const pthread_attr_t , arg3 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) -> * mut :: std :: os :: raw :: c_void > , arg4 : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_detach ( arg1 : pthread_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_equal ( arg1 : pthread_t , arg2 : pthread_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_exit ( arg1 : * mut :: std :: os :: raw :: c_void ) ; } extern "C" { pub fn pthread_getconcurrency ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_getschedparam ( arg1 : pthread_t , arg2 : * mut :: std :: os :: raw :: c_int , arg3 : * mut sched_param ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_getspecific ( arg1 : pthread_key_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn pthread_join ( arg1 : pthread_t , arg2 : * mut * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_key_create ( arg1 : * mut pthread_key_t , arg2 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) > ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_key_delete ( arg1 : pthread_key_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_mutex_destroy ( arg1 : * mut pthread_mutex_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_mutex_getprioceiling ( arg1 : * const pthread_mutex_t , arg2 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_mutex_init ( arg1 : * mut pthread_mutex_t , arg2 : * const pthread_mutexattr_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_mutex_lock ( arg1 : * mut pthread_mutex_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_mutex_setprioceiling ( arg1 : * mut pthread_mutex_t , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_mutex_trylock ( arg1 : * mut pthread_mutex_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_mutex_unlock ( arg1 : * mut pthread_mutex_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_mutexattr_destroy ( arg1 : * mut pthread_mutexattr_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_mutexattr_getprioceiling ( arg1 : * const pthread_mutexattr_t , arg2 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_mutexattr_getprotocol ( arg1 : * const pthread_mutexattr_t , arg2 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_mutexattr_getpshared ( arg1 : * const pthread_mutexattr_t , arg2 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_mutexattr_gettype ( arg1 : * const pthread_mutexattr_t , arg2 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_mutexattr_getpolicy_np ( arg1 : * const pthread_mutexattr_t , arg2 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_mutexattr_init ( arg1 : * mut pthread_mutexattr_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_mutexattr_setprioceiling ( arg1 : * mut pthread_mutexattr_t , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_mutexattr_setprotocol ( arg1 : * mut pthread_mutexattr_t , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_mutexattr_setpshared ( arg1 : * mut pthread_mutexattr_t , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_mutexattr_settype ( arg1 : * mut pthread_mutexattr_t , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_mutexattr_setpolicy_np ( arg1 : * mut pthread_mutexattr_t , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_once ( arg1 : * mut pthread_once_t , arg2 : :: std :: option :: Option < unsafe extern "C" fn ( ) > ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_rwlock_destroy ( arg1 : * mut pthread_rwlock_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_rwlock_init ( arg1 : * mut pthread_rwlock_t , arg2 : * const pthread_rwlockattr_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_rwlock_rdlock ( arg1 : * mut pthread_rwlock_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_rwlock_tryrdlock ( arg1 : * mut pthread_rwlock_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_rwlock_trywrlock ( arg1 : * mut pthread_rwlock_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_rwlock_wrlock ( arg1 : * mut pthread_rwlock_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_rwlock_unlock ( arg1 : * mut pthread_rwlock_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_rwlockattr_destroy ( arg1 : * mut pthread_rwlockattr_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_rwlockattr_getpshared ( arg1 : * const pthread_rwlockattr_t , arg2 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_rwlockattr_init ( arg1 : * mut pthread_rwlockattr_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_rwlockattr_setpshared ( arg1 : * mut pthread_rwlockattr_t , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_self ( ) -> pthread_t ; } extern "C" { pub fn pthread_setcancelstate ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_setcanceltype ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_setconcurrency ( arg1 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_setschedparam ( arg1 : pthread_t , arg2 : :: std :: os :: raw :: c_int , arg3 : * const sched_param ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_setspecific ( arg1 : pthread_key_t , arg2 : * const :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_testcancel ( ) ; } extern "C" { pub fn pthread_is_threaded_np ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_threadid_np ( arg1 : pthread_t , arg2 : * mut __uint64_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_getname_np ( arg1 : pthread_t , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_setname_np ( arg1 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_main_np ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_mach_thread_np ( arg1 : pthread_t ) -> mach_port_t ; } extern "C" { pub fn pthread_get_stacksize_np ( arg1 : pthread_t ) -> usize ; } extern "C" { pub fn pthread_get_stackaddr_np ( arg1 : pthread_t ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn pthread_cond_signal_thread_np ( arg1 : * mut pthread_cond_t , arg2 : pthread_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_cond_timedwait_relative_np ( arg1 : * mut pthread_cond_t , arg2 : * mut pthread_mutex_t , arg3 : * const timespec ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_create_suspended_np ( arg1 : * mut pthread_t , arg2 : * const pthread_attr_t , arg3 : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) -> * mut :: std :: os :: raw :: c_void > , arg4 : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_kill ( arg1 : pthread_t , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_from_mach_thread_np ( arg1 : mach_port_t ) -> pthread_t ; } extern "C" { pub fn pthread_sigmask ( arg1 : :: std :: os :: raw :: c_int , arg2 : * const sigset_t , arg3 : * mut sigset_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_yield_np ( ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct accessx_descriptor { pub ad_name_offset : :: std :: os :: raw :: c_uint , pub ad_flags : :: std :: os :: raw :: c_int , pub ad_pad : [ :: std :: os :: raw :: c_int ; 2usize ] , } # [ test ] fn bindgen_test_layout_accessx_descriptor ( ) { assert_eq ! ( :: std :: mem :: size_of :: < accessx_descriptor > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( accessx_descriptor ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < accessx_descriptor > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( accessx_descriptor ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < accessx_descriptor > ( ) ) ) . ad_name_offset as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( accessx_descriptor ) , "::" , stringify ! ( ad_name_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < accessx_descriptor > ( ) ) ) . ad_flags as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( accessx_descriptor ) , "::" , stringify ! ( ad_flags ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < accessx_descriptor > ( ) ) ) . ad_pad as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( accessx_descriptor ) , "::" , stringify ! ( ad_pad ) ) ) ; } extern "C" { pub fn getattrlistbulk ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_void , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : usize , arg5 : u64 ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getattrlistat ( arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : * mut :: std :: os :: raw :: c_void , arg5 : usize , arg6 : :: std :: os :: raw :: c_ulong ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setattrlistat ( arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : * mut :: std :: os :: raw :: c_void , arg5 : usize , arg6 : u32 ) -> :: std :: os :: raw :: c_int ; } pub type gid_t = __darwin_gid_t ; extern "C" { pub fn faccessat ( arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fchownat ( arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_char , arg3 : uid_t , arg4 : gid_t , arg5 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn linkat ( arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int , arg4 : * const :: std :: os :: raw :: c_char , arg5 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn readlinkat ( arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_char , arg3 : * mut :: std :: os :: raw :: c_char , arg4 : usize ) -> isize ; } extern "C" { pub fn symlinkat ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn unlinkat ( arg1 : :: std :: os :: raw :: c_int , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } pub type useconds_t = __darwin_useconds_t ; extern "C" { pub fn _exit ( arg1 : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn access ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn alarm ( arg1 : :: std :: os :: raw :: c_uint ) -> :: std :: os :: raw :: c_uint ; } extern "C" { pub fn chdir ( arg1 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn chown ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : uid_t , arg3 : gid_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn close ( arg1 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn dup ( arg1 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn dup2 ( arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn execl ( __path : * const :: std :: os :: raw :: c_char , __arg0 : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn execle ( __path : * const :: std :: os :: raw :: c_char , __arg0 : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn execlp ( __file : * const :: std :: os :: raw :: c_char , __arg0 : * const :: std :: os :: raw :: c_char , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn execv ( __path : * const :: std :: os :: raw :: c_char , __argv : * const * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn execve ( __file : * const :: std :: os :: raw :: c_char , __argv : * const * mut :: std :: os :: raw :: c_char , __envp : * const * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn execvp ( __file : * const :: std :: os :: raw :: c_char , __argv : * const * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fork ( ) -> pid_t ; } extern "C" { pub fn fpathconf ( arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn getcwd ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : usize ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn getegid ( ) -> gid_t ; } extern "C" { pub fn geteuid ( ) -> uid_t ; } extern "C" { pub fn getgid ( ) -> gid_t ; } extern "C" { pub fn getgroups ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut gid_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getlogin ( ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn getpgrp ( ) -> pid_t ; } extern "C" { pub fn getpid ( ) -> pid_t ; } extern "C" { pub fn getppid ( ) -> pid_t ; } extern "C" { pub fn getuid ( ) -> uid_t ; } extern "C" { pub fn isatty ( arg1 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn link ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn lseek ( arg1 : :: std :: os :: raw :: c_int , arg2 : off_t , arg3 : :: std :: os :: raw :: c_int ) -> off_t ; } extern "C" { pub fn pathconf ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn pause ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pipe ( arg1 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn read ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_void , arg3 : usize ) -> isize ; } extern "C" { pub fn rmdir ( arg1 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setgid ( arg1 : gid_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setpgid ( arg1 : pid_t , arg2 : pid_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setsid ( ) -> pid_t ; } extern "C" { pub fn setuid ( arg1 : uid_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sleep ( arg1 : :: std :: os :: raw :: c_uint ) -> :: std :: os :: raw :: c_uint ; } extern "C" { pub fn sysconf ( arg1 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn tcgetpgrp ( arg1 : :: std :: os :: raw :: c_int ) -> pid_t ; } extern "C" { pub fn tcsetpgrp ( arg1 : :: std :: os :: raw :: c_int , arg2 : pid_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ttyname ( arg1 : :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn ttyname_r ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn unlink ( arg1 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn write ( __fd : :: std :: os :: raw :: c_int , __buf : * const :: std :: os :: raw :: c_void , __nbyte : usize ) -> isize ; } extern "C" { pub fn confstr ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : usize ) -> usize ; } extern "C" { pub fn getopt ( arg1 : :: std :: os :: raw :: c_int , arg2 : * const * mut :: std :: os :: raw :: c_char , arg3 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub static mut optarg : * mut :: std :: os :: raw :: c_char ; } extern "C" { pub static mut optind : :: std :: os :: raw :: c_int ; } extern "C" { pub static mut opterr : :: std :: os :: raw :: c_int ; } extern "C" { pub static mut optopt : :: std :: os :: raw :: c_int ; } extern "C" { pub fn brk ( arg1 : * const :: std :: os :: raw :: c_void ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn chroot ( arg1 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn crypt ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn encrypt ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int ) ; } extern "C" { pub fn fchdir ( arg1 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn gethostid ( ) -> :: std :: os :: raw :: c_long ; } extern "C" { pub fn getpgid ( arg1 : pid_t ) -> pid_t ; } extern "C" { pub fn getsid ( arg1 : pid_t ) -> pid_t ; } extern "C" { pub fn getdtablesize ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getpagesize ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getpass ( arg1 : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn getwd ( arg1 : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn lchown ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : uid_t , arg3 : gid_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn lockf ( arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int , arg3 : off_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn nice ( arg1 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pread ( __fd : :: std :: os :: raw :: c_int , __buf : * mut :: std :: os :: raw :: c_void , __nbyte : usize , __offset : off_t ) -> isize ; } extern "C" { pub fn pwrite ( __fd : :: std :: os :: raw :: c_int , __buf : * const :: std :: os :: raw :: c_void , __nbyte : usize , __offset : off_t ) -> isize ; } extern "C" { pub fn sbrk ( arg1 : :: std :: os :: raw :: c_int ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn setpgrp ( ) -> pid_t ; } extern "C" { pub fn setregid ( arg1 : gid_t , arg2 : gid_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setreuid ( arg1 : uid_t , arg2 : uid_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn swab ( arg1 : * const :: std :: os :: raw :: c_void , arg2 : * mut :: std :: os :: raw :: c_void , arg3 : isize ) ; } extern "C" { pub fn sync ( ) ; } extern "C" { pub fn truncate ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : off_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ualarm ( arg1 : useconds_t , arg2 : useconds_t ) -> useconds_t ; } extern "C" { pub fn usleep ( arg1 : useconds_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn vfork ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fsync ( arg1 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ftruncate ( arg1 : :: std :: os :: raw :: c_int , arg2 : off_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getlogin_r ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fchown ( arg1 : :: std :: os :: raw :: c_int , arg2 : uid_t , arg3 : gid_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn gethostname ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : usize ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn readlink ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * mut :: std :: os :: raw :: c_char , arg3 : usize ) -> isize ; } extern "C" { pub fn setegid ( arg1 : gid_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn seteuid ( arg1 : uid_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn symlink ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct fd_set { pub fds_bits : [ __int32_t ; 32usize ] , } # [ test ] fn bindgen_test_layout_fd_set ( ) { assert_eq ! ( :: std :: mem :: size_of :: < fd_set > ( ) , 128usize , concat ! ( "Size of: " , stringify ! ( fd_set ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < fd_set > ( ) , 4usize , concat ! ( "Alignment of " , stringify ! ( fd_set ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < fd_set > ( ) ) ) . fds_bits as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( fd_set ) , "::" , stringify ! ( fds_bits ) ) ) ; } pub type suseconds_t = __darwin_suseconds_t ; extern "C" { # [ link_name = "\u{1}_pselect$1050" ] pub fn pselect ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut fd_set , arg3 : * mut fd_set , arg4 : * mut fd_set , arg5 : * const timespec , arg6 : * const sigset_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { # [ link_name = "\u{1}_select$1050" ] pub fn select ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut fd_set , arg3 : * mut fd_set , arg4 : * mut fd_set , arg5 : * mut timeval ) -> :: std :: os :: raw :: c_int ; } pub type uuid_t = __darwin_uuid_t ; extern "C" { pub fn accessx_np ( arg1 : * const accessx_descriptor , arg2 : usize , arg3 : * mut :: std :: os :: raw :: c_int , arg4 : uid_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn acct ( arg1 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn add_profil ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : usize , arg3 : :: std :: os :: raw :: c_ulong , arg4 : :: std :: os :: raw :: c_uint ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn endusershell ( ) ; } extern "C" { pub fn execvP ( __file : * const :: std :: os :: raw :: c_char , __searchpath : * const :: std :: os :: raw :: c_char , __argv : * const * mut :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fflagstostr ( arg1 : :: std :: os :: raw :: c_ulong ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn getdomainname ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getgrouplist ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int , arg3 : * mut :: std :: os :: raw :: c_int , arg4 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn gethostuuid ( arg1 : * mut :: std :: os :: raw :: c_uchar , arg2 : * const timespec ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getmode ( arg1 : * const :: std :: os :: raw :: c_void , arg2 : mode_t ) -> mode_t ; } extern "C" { pub fn getpeereid ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut uid_t , arg3 : * mut gid_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getsgroups_np ( arg1 : * mut :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_uchar ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getusershell ( ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn getwgroups_np ( arg1 : * mut :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_uchar ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn initgroups ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn issetugid ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mkdtemp ( arg1 : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn mknod ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : mode_t , arg3 : dev_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mkpath_np ( path : * const :: std :: os :: raw :: c_char , omode : mode_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mkpathat_np ( dfd : :: std :: os :: raw :: c_int , path : * const :: std :: os :: raw :: c_char , omode : mode_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mkstemps ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mkostemp ( path : * mut :: std :: os :: raw :: c_char , oflags : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mkostemps ( path : * mut :: std :: os :: raw :: c_char , slen : :: std :: os :: raw :: c_int , oflags : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mkstemp_dprotected_np ( path : * mut :: std :: os :: raw :: c_char , dpclass : :: std :: os :: raw :: c_int , dpflags : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mkdtempat_np ( dfd : :: std :: os :: raw :: c_int , path : * mut :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_char ; } extern "C" { pub fn mkstempsat_np ( dfd : :: std :: os :: raw :: c_int , path : * mut :: std :: os :: raw :: c_char , slen : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn mkostempsat_np ( dfd : :: std :: os :: raw :: c_int , path : * mut :: std :: os :: raw :: c_char , slen : :: std :: os :: raw :: c_int , oflags : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn nfssvc ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn profil ( arg1 : * mut :: std :: os :: raw :: c_char , arg2 : usize , arg3 : :: std :: os :: raw :: c_ulong , arg4 : :: std :: os :: raw :: c_uint ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_setugid_np ( arg1 : uid_t , arg2 : gid_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pthread_getugid_np ( arg1 : * mut uid_t , arg2 : * mut gid_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn reboot ( arg1 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn revoke ( arg1 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn rcmd ( arg1 : * mut * mut :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * const :: std :: os :: raw :: c_char , arg5 : * const :: std :: os :: raw :: c_char , arg6 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn rcmd_af ( arg1 : * mut * mut :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * const :: std :: os :: raw :: c_char , arg5 : * const :: std :: os :: raw :: c_char , arg6 : * mut :: std :: os :: raw :: c_int , arg7 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn rresvport ( arg1 : * mut :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn rresvport_af ( arg1 : * mut :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn iruserok ( arg1 : :: std :: os :: raw :: c_ulong , arg2 : :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn iruserok_sa ( arg1 : * const :: std :: os :: raw :: c_void , arg2 : :: std :: os :: raw :: c_int , arg3 : :: std :: os :: raw :: c_int , arg4 : * const :: std :: os :: raw :: c_char , arg5 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ruserok ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int , arg3 : * const :: std :: os :: raw :: c_char , arg4 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setdomainname ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setgroups ( arg1 : :: std :: os :: raw :: c_int , arg2 : * const gid_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sethostid ( arg1 : :: std :: os :: raw :: c_long ) ; } extern "C" { pub fn sethostname ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setlogin ( arg1 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setmode ( arg1 : * const :: std :: os :: raw :: c_char ) -> * mut :: std :: os :: raw :: c_void ; } extern "C" { pub fn setrgid ( arg1 : gid_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setruid ( arg1 : uid_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setsgroups_np ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_uchar ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setusershell ( ) ; } extern "C" { pub fn setwgroups_np ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_uchar ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn strtofflags ( arg1 : * mut * mut :: std :: os :: raw :: c_char , arg2 : * mut :: std :: os :: raw :: c_ulong , arg3 : * mut :: std :: os :: raw :: c_ulong ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn swapon ( arg1 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ttyslot ( ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn undelete ( arg1 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn unwhiteout ( arg1 : * const :: std :: os :: raw :: c_char ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn syscall ( arg1 : :: std :: os :: raw :: c_int , ... ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fgetattrlist ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_void , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : usize , arg5 : :: std :: os :: raw :: c_uint ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fsetattrlist ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_void , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : usize , arg5 : :: std :: os :: raw :: c_uint ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getattrlist ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * mut :: std :: os :: raw :: c_void , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : usize , arg5 : :: std :: os :: raw :: c_uint ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn setattrlist ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * mut :: std :: os :: raw :: c_void , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : usize , arg5 : :: std :: os :: raw :: c_uint ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn exchangedata ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * const :: std :: os :: raw :: c_char , arg3 : :: std :: os :: raw :: c_uint ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn getdirentriesattr ( arg1 : :: std :: os :: raw :: c_int , arg2 : * mut :: std :: os :: raw :: c_void , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : usize , arg5 : * mut :: std :: os :: raw :: c_uint , arg6 : * mut :: std :: os :: raw :: c_uint , arg7 : * mut :: std :: os :: raw :: c_uint , arg8 : :: std :: os :: raw :: c_uint ) -> :: std :: os :: raw :: c_int ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct fssearchblock { _unused : [ u8 ; 0 ] , } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct searchstate { _unused : [ u8 ; 0 ] , } extern "C" { pub fn searchfs ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : * mut fssearchblock , arg3 : * mut :: std :: os :: raw :: c_ulong , arg4 : :: std :: os :: raw :: c_uint , arg5 : :: std :: os :: raw :: c_uint , arg6 : * mut searchstate ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fsctl ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_ulong , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : :: std :: os :: raw :: c_uint ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn ffsctl ( arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_ulong , arg3 : * mut :: std :: os :: raw :: c_void , arg4 : :: std :: os :: raw :: c_uint ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn fsync_volume_np ( arg1 : :: std :: os :: raw :: c_int , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn sync_volume_np ( arg1 : * const :: std :: os :: raw :: c_char , arg2 : :: std :: os :: raw :: c_int ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub static mut optreset : :: std :: os :: raw :: c_int ; } pub type rsize_t = :: std :: os :: raw :: c_ulong ; pub type max_align_t = u128 ; pub const memory_order_memory_order_relaxed : memory_order = 0 ; pub const memory_order_memory_order_consume : memory_order = 1 ; pub const memory_order_memory_order_acquire : memory_order = 2 ; pub const memory_order_memory_order_release : memory_order = 3 ; pub const memory_order_memory_order_acq_rel : memory_order = 4 ; pub const memory_order_memory_order_seq_cst : memory_order = 5 ; pub type memory_order = u32 ; extern "C" { pub fn atomic_thread_fence ( arg1 : memory_order ) ; } extern "C" { pub fn atomic_signal_fence ( arg1 : memory_order ) ; } pub type atomic_bool = u8 ; pub type atomic_char = u8 ; pub type atomic_schar = u8 ; pub type atomic_uchar = u8 ; pub type atomic_short = u16 ; pub type atomic_ushort = u16 ; pub type atomic_int = u32 ; pub type atomic_uint = u32 ; pub type atomic_long = u64 ; pub type atomic_ulong = u64 ; pub type atomic_llong = u64 ; pub type atomic_ullong = u64 ; pub type atomic_char16_t = uint_least16_t ; pub type atomic_char32_t = uint_least32_t ; pub type atomic_wchar_t = wchar_t ; pub type atomic_int_least8_t = int_least8_t ; pub type atomic_uint_least8_t = uint_least8_t ; pub type atomic_int_least16_t = int_least16_t ; pub type atomic_uint_least16_t = uint_least16_t ; pub type atomic_int_least32_t = int_least32_t ; pub type atomic_uint_least32_t = uint_least32_t ; pub type atomic_int_least64_t = int_least64_t ; pub type atomic_uint_least64_t = uint_least64_t ; pub type atomic_int_fast8_t = int_fast8_t ; pub type atomic_uint_fast8_t = uint_fast8_t ; pub type atomic_int_fast16_t = int_fast16_t ; pub type atomic_uint_fast16_t = uint_fast16_t ; pub type atomic_int_fast32_t = int_fast32_t ; pub type atomic_uint_fast32_t = uint_fast32_t ; pub type atomic_int_fast64_t = int_fast64_t ; pub type atomic_uint_fast64_t = uint_fast64_t ; pub type atomic_intptr_t = isize ; pub type atomic_uintptr_t = usize ; pub type atomic_size_t = usize ; pub type atomic_ptrdiff_t = isize ; pub type atomic_intmax_t = intmax_t ; pub type atomic_uintmax_t = uintmax_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct atomic_flag { pub _Value : atomic_bool , } # [ test ] fn bindgen_test_layout_atomic_flag ( ) { assert_eq ! ( :: std :: mem :: size_of :: < atomic_flag > ( ) , 1usize , concat ! ( "Size of: " , stringify ! ( atomic_flag ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < atomic_flag > ( ) , 1usize , concat ! ( "Alignment of " , stringify ! ( atomic_flag ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < atomic_flag > ( ) ) ) . _Value as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( atomic_flag ) , "::" , stringify ! ( _Value ) ) ) ; } extern "C" { pub fn atomic_flag_test_and_set ( arg1 : * mut atomic_flag ) -> bool ; } extern "C" { pub fn atomic_flag_test_and_set_explicit ( arg1 : * mut atomic_flag , arg2 : memory_order ) -> bool ; } extern "C" { pub fn atomic_flag_clear ( arg1 : * mut atomic_flag ) ; } extern "C" { pub fn atomic_flag_clear_explicit ( arg1 : * mut atomic_flag , arg2 : memory_order ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct qnl_exec_t { pub qe_func : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) > , pub qe_arg : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout_qnl_exec_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < qnl_exec_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( qnl_exec_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < qnl_exec_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( qnl_exec_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < qnl_exec_t > ( ) ) ) . qe_func as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( qnl_exec_t ) , "::" , stringify ! ( qe_func ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < qnl_exec_t > ( ) ) ) . qe_arg as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( qnl_exec_t ) , "::" , stringify ! ( qe_arg ) ) ) ; } extern "C" { pub fn qnl_exec_init ( ) -> * mut qnl_exec_t ; } extern "C" { pub fn qnl_exec_destroy ( qe : * mut qnl_exec_t ) ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct _qnode_t { pub qn_data : * mut qnl_exec_t , pub qn_next : * mut _qnode_t , } # [ test ] fn bindgen_test_layout__qnode_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < _qnode_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( _qnode_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < _qnode_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( _qnode_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _qnode_t > ( ) ) ) . qn_data as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( _qnode_t ) , "::" , stringify ! ( qn_data ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < _qnode_t > ( ) ) ) . qn_next as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( _qnode_t ) , "::" , stringify ! ( qn_next ) ) ) ; } pub type qnode_t = _qnode_t ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct qend_t { pub qe_count : u64 , pub qe_node : * mut qnode_t , } # [ test ] fn bindgen_test_layout_qend_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < qend_t > ( ) , 16usize , concat ! ( "Size of: " , stringify ! ( qend_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < qend_t > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( qend_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < qend_t > ( ) ) ) . qe_count as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( qend_t ) , "::" , stringify ! ( qe_count ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < qend_t > ( ) ) ) . qe_node as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( qend_t ) , "::" , stringify ! ( qe_node ) ) ) ; } # [ repr ( C ) ] # [ repr ( align ( 16 ) ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct queue_t { pub q_size : atomic_int , pub __bindgen_padding_0 : u64 , pub q_head : qend_t , pub q_tail : qend_t , } # [ test ] fn bindgen_test_layout_queue_t ( ) { assert_eq ! ( :: std :: mem :: size_of :: < queue_t > ( ) , 48usize , concat ! ( "Size of: " , stringify ! ( queue_t ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < queue_t > ( ) , 16usize , concat ! ( "Alignment of " , stringify ! ( queue_t ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < queue_t > ( ) ) ) . q_size as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( queue_t ) , "::" , stringify ! ( q_size ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < queue_t > ( ) ) ) . q_head as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( queue_t ) , "::" , stringify ! ( q_head ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < queue_t > ( ) ) ) . q_tail as * const _ as usize } , 32usize , concat ! ( "Offset of field: " , stringify ! ( queue_t ) , "::" , stringify ! ( q_tail ) ) ) ; } pub type qnl_t = queue_t ; extern "C" { pub fn qnl_init ( ) -> * mut qnl_t ; } extern "C" { pub fn qnl_destroy ( q : * mut qnl_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn qnl_size ( q : * mut qnl_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn qnl_enqueue ( q : * mut qnl_t , in_ : * mut qnl_exec_t ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn qnl_dequeue ( q : * mut qnl_t ) -> * mut qnl_exec_t ; } extern "C" { pub fn qnl_peek ( q : * mut qnl_t ) -> * mut qnl_exec_t ; } # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct pool_tag { pub pa_threads : atomic_int , pub pa_kill : atomic_bool , pub p_work : * mut qnl_t , pub p_lock : * mut pthread_mutex_t , pub p_cond : * mut pthread_cond_t , } # [ test ] fn bindgen_test_layout_pool_tag ( ) { assert_eq ! ( :: std :: mem :: size_of :: < pool_tag > ( ) , 32usize , concat ! ( "Size of: " , stringify ! ( pool_tag ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < pool_tag > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( pool_tag ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pool_tag > ( ) ) ) . pa_threads as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( pool_tag ) , "::" , stringify ! ( pa_threads ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pool_tag > ( ) ) ) . pa_kill as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( pool_tag ) , "::" , stringify ! ( pa_kill ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pool_tag > ( ) ) ) . p_work as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( pool_tag ) , "::" , stringify ! ( p_work ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pool_tag > ( ) ) ) . p_lock as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( pool_tag ) , "::" , stringify ! ( p_lock ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < pool_tag > ( ) ) ) . p_cond as * const _ as usize } , 24usize , concat ! ( "Offset of field: " , stringify ! ( pool_tag ) , "::" , stringify ! ( p_cond ) ) ) ; } pub type pool_t = pool_tag ; extern "C" { pub fn pool_init ( thread_number : :: std :: os :: raw :: c_int ) -> * mut pool_t ; } extern "C" { pub fn pool_exec ( in_ : * mut pool_t , exec_f : :: std :: option :: Option < unsafe extern "C" fn ( arg1 : * mut :: std :: os :: raw :: c_void ) > , arg : * mut :: std :: os :: raw :: c_void ) -> :: std :: os :: raw :: c_int ; } extern "C" { pub fn pool_destroy ( out : * mut pool_t ) ; } pub type __builtin_va_list = [ __va_list_tag ; 1usize ] ; # [ repr ( C ) ] # [ derive ( Debug , Copy , Clone ) ] pub struct __va_list_tag { pub gp_offset : :: std :: os :: raw :: c_uint , pub fp_offset : :: std :: os :: raw :: c_uint , pub overflow_arg_area : * mut :: std :: os :: raw :: c_void , pub reg_save_area : * mut :: std :: os :: raw :: c_void , } # [ test ] fn bindgen_test_layout___va_list_tag ( ) { assert_eq ! ( :: std :: mem :: size_of :: < __va_list_tag > ( ) , 24usize , concat ! ( "Size of: " , stringify ! ( __va_list_tag ) ) ) ; assert_eq ! ( :: std :: mem :: align_of :: < __va_list_tag > ( ) , 8usize , concat ! ( "Alignment of " , stringify ! ( __va_list_tag ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __va_list_tag > ( ) ) ) . gp_offset as * const _ as usize } , 0usize , concat ! ( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( gp_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __va_list_tag > ( ) ) ) . fp_offset as * const _ as usize } , 4usize , concat ! ( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( fp_offset ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __va_list_tag > ( ) ) ) . overflow_arg_area as * const _ as usize } , 8usize , concat ! ( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( overflow_arg_area ) ) ) ; assert_eq ! ( unsafe { & ( * ( :: std :: ptr :: null :: < __va_list_tag > ( ) ) ) . reg_save_area as * const _ as usize } , 16usize , concat ! ( "Offset of field: " , stringify ! ( __va_list_tag ) , "::" , stringify ! ( reg_save_area ) ) ) ; }